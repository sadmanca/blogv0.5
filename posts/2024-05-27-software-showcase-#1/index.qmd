---
title: "Software Showcase #1: `asciinema`, `agg`, `svg-term-cli`, & `PowerSession-rs`"
aliases: ["/asciinema"]
description: "CLI tools for recording terminal sessions locally & to the web as videos, GIFs, & animated SVGs"
date: "2024-05-27"
categories: ["Software", "Showcase", "Tools", "CLI"]
format:
  html:
    smooth-scroll: true
    code-tools: false
    code-copy: hover
embed-resources: true
filters:
  - quarto
  - line-highlight
jupyter: python3

reference-location: margin
citation-location: margin
image: resources/asciinema.svg
---

I'm always coming across new tools, libraries, and frameworks for creating new things or just making life on the computer here a bit easier for myself by automating tasks, and I always forget to take note of whatever I come across, so this post is the start of (hopefully) many in a series of me doing double-duty to show off all the cool bits of software I come across [^includinghowto] (from things as small as a little bash script to make timing out of hanging programs to as large as the full-blown software toolkits like `ffmpeg`) and make a formal record of all of them for my own notekeeping (because I have so many stars on GitHub and I can hardly remember what a fraction of them are even about). 

[^includinghowto]: Including how to set things up, which is something that I have to learn from scratch every time I go to set things up on yet another device and so it's something that I want to make note (and while I'm doing that, I might as well share it with the rest of the world)

I usually come across these tools whenever I'm browsing GitHub to find some working piece of software or code to resolve some pain point of mine (or to automate things so I can be lazy), and seeing as that I'm trying to figure out how to include little GIFs of me running code in terminals on blog posts[^renaissance], terminal session recorders are a good place to start.

[^renaissance]: I'm trying to take blogging seriously right now (for the record, I've tried at least twice before and failed to stick with it), and for me that means going all out in making my blog posts multimodal and interesting (which is why I care about these terminal recordings).

# Terminal Session Recorders

## What are terminal session recorders?

Terminal session recorders, like [`asciinema`](https://github.com/asciinema/asciinema)[^mentally], are CLI tools that can record (and playback recordings of) standard input/output in terminal sessions. What makes them different from just using screen recording software is that terminal session recorders run *inside* a terminal[^instead] and store the actual raw text from terminal sessions as a stream of events using a custom file format[^asiicast], which means that a) recordings take up *much* less space compared to video files; b) you can actually copy the raw text being displayed when playing back recordings[^sousefulforweb]; and c) you can *customize* how terminal sessions look in recordings (which means you don't have to re-record sessions for modifications like changing font styles).

[^mentally]: Despite being constantly reminded that it's spelled "as-ciinema", I just pronounce that word in my head as "ascii-cinema" ðŸ˜…

[^instead]: Instead of as a window display capture service running as a GUI program.

[^asiicast]: [`asciicast`](https://docs.asciinema.org/manual/asciicast/v2/) for `asciinema`

[^sousefulforweb]: Which can be incredibly useful for, say, replicating the actions in a GIF you found for a project or tool online (especially if they have interactivity like [Vim](https://github.com/vim/vim) or [Micro](https://github.com/zyedidia/micro))

## Why I care about terminal session recorders

The main reason that I'm interested in terminal session recorders are two-fold:

1. I want to be able to show snippets of terminal sessions in blog posts on my website without slowing down pages by loading several videos[^videolens]

2. I want to be able to easily create GIFs/animated SVGs\* for READMEs for my projects on GitHub[^egeagerdb]

\*More on point 2, converting recordings from `asciicast` to GIF/SVG is where `asciinema` falls flat (it only supports its proprietary), which is where middleware like `agg` and `PowerSession-rs` come in.

[^videolens]: Of which virtually all will be up to only a couple seconds in length

[^egeagerdb]: One example is [eagerDB](https://github.com/sadmanca/eagerDB), which I currently just have a rather boring single image for in its README that I'm looking to spice up a bit.

But before we dive into those `asciinema`-derivatives, let's take a quick look at what exactly `asciinema` has to offer (including how to use it to record sessions).

# `asciinema`

## Installation

You can install `asciinema` using PyPI via pip or using your package repository of choice[^mostaresupported] on Linux, macOS, and FreeBSD[^asyoumightvenoticed].

[^mostaresupported]: Most are supported, you can find the full list at [docs.asciinema.org/manual/cli/installation](https://docs.asciinema.org/manual/cli/installation/)

[^asyoumightvenoticed]: As you might've noticed, Windows is not listed. There's a good reason for that, and we'll get to it when we talk about [`PowerSession-rs`]().

## Usage

Once you've got it installed, there are 3 main commands: record (via `rec`), playback recordings (via `play`), or upload a recording to [asciinema.org](https://asciinema.org/) or a [self-hosted asciinema server](https://docs.asciinema.org/manual/server/self-hosting/) (via `upload` [^theresalsoauth])

[^theresalsoauth]: There's also the `auth` command for uploading recordings to a specific account (you can also upload anonymously without having to use the `auth` command, but anonymous uploads that aren't linked to an account within 7 days of their upload date are automatically deleted, so if you want to keep your recordings around for a while you will need to use `auth`).

### `asciinema rec [filename]`

Start up a recording session using `asciinema rec [filename]`[^ifomitted] and `asciinema` will launch a new shell[^whatisashell] in your terminal and start recording standard output. In addition, there are load of different options[^seemore] you can configure for recordings, some of the more useful of which include:

- recording standard input (via the keyboard) in addition to standard output via `--stdin`
- appending to an existing recording via `--append`
- recording output for a single command only[^insteadofinteractiveshell] or specific shell (instead of the default at `$SHELL`) via `-c, --command=<command>`
- limiting recorded terminal inactivity to some max `<sec>` seconds via `-i, --idle-time-limit=<sec>`

[^ifomitted]: You can also omit `[filename]` and just run `asciinema rec`; after ending the recording, you'll receive a prompt in the terminal to save the recording locally, upload to [asciinema.org](https://asciinema.org/), or discard (which will also delete the temporary file used to store the recording).

[^whatisashell]: **Terminal vs. Shell:** a shell is a command-line interpreter that processes commands, whereas a terminal is a program (or even a [hardware device](https://en.wikipedia.org/wiki/Computer_terminal)) that provides a user interface for running a shell.

[^seemore]: See the [`asciinema` docs](https://docs.asciinema.org/manual/cli/usage/#asciinema-rec-filename) for more options.

[^insteadofinteractiveshell]: Instead of an interactive shell where you can type in any number of commands and the recording only stops once you enter `exit` or press `CTRL+d`

### `asciinema play <filename/url>`

Replay a terminal session recorded using `rec` (at a local file or url) in the current terminal using `asciinema play`. You can pause/resume playback by pressing `space`, or end playback by pressing `CTRL+c`. Similar to `rec`, you also have some options for:

- limiting replayed terminal inactivity to some max `<sec>` seconds via `-i, --idle-time-limit=<sec>`
- setting playback speed via `-s, --speed=<factor>`
- looping playback via `-l, --loop`
- automatically pausing playback on markers[^wtfaremarkers] via `-m, --pause-on-markers`

[^wtfaremarkers]: Markers are like breakpoints or video chapters in YouTube that allow to mark specific timestamps in recordings for navigation; you can configure the `asciinema` recorder to have a [keyboard shortcut for adding markers during recording](https://docs.asciinema.org/manual/cli/configuration/) or edit an existing recording and insert marker lines as specified in the [documentation for asciinema markers](https://docs.asciinema.org/manual/player/markers/). On the web, markers are shown in the video timeline (similar to video chapters in YouTube), and can make jumping to points of interest in a terminal session a lot easier.

  Embed the example video from https://docs.asciinema.org/manual/player/markers/ HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

### `asciinema upload <filename>`

Fairly self-explanatory, this command uploads a local recording to whatever URL is specified in the `ASCIINEMA_API_URL` environment variable ([asciinema.org](https://asciinema.org/) by default[^specificallyunderyour]).

[^specificallyunderyour]: Under whatever account has been authenticated via `asciinema auth` or anonymously if you haven't run that yet.

## `asciinema` on the web

You can view your and others' uploaded recordings on [asciinema.org](https://asciinema.org/)[^somequitecool]. More importantly, you can embed uploaded recordings as iframes in HTML pages using some inline JavaScript as below:

[^somequitecool]: And there are some quite cool recordings on there, from a [demo of a mapping CLI](https://asciinema.org/a/117813) to [iterative git rebasing with `vim`](https://asciinema.org/a/9593).

```{.html}
<script src="https://asciinema.org/a/bJMOlPe5F4mFLY0Rl6fiJSOp3.js" id="asciicast-bJMOlPe5F4mFLY0Rl6fiJSOp3" async></script>
```

```{=html}
<script src="https://asciinema.org/a/bJMOlPe5F4mFLY0Rl6fiJSOp3.js" id="asciicast-bJMOlPe5F4mFLY0Rl6fiJSOp3" async></script>
```

While the look and feel of the embedded player defaults to the original uploader's settings, you can override settings yourself using the following modifications to the inline script:

```{.html}
#| source-line-numbers: "4-11"
<script 
  src="https://asciinema.org/a/bJMOlPe5F4mFLY0Rl6fiJSOp3.js" 
  id="..." 
  data-start-at="1:02:03" 
  data-autoplay="true" 
  data-loop="true" 
  data-speed="2.75" 
  data-idle-time-limit="2" 
  data-theme="solarized-dark" 
  data-poster="npt:1:23" <!-- player preview frame timestamp -->
  data-cols="50" <!-- terminal width -->
  data-rows="80" <!-- terminal height -->
  data-preload="true" 
  async>
</script>
```

```{=html}
<script src="https://asciinema.org/a/bJMOlPe5F4mFLY0Rl6fiJSOp3.js" id="asciicast-bJMOlPe5F4mFLY0Rl6fiJSOp3" async data-start-at="25" data-speed="2" data-theme="solarized-dark" data-loop="true" data-preload="true" data-autoplay="true"></script>
```

## Where `asciinema` falls flat

### Problem 1: Windows & **`PowerSession-rs`**

The `asciinema` website and GitHub repository do an exceedingly poor job of telling you this from the get-go[^iactuallyinstalled], but ***`asciinema` does not work on Windows!*** 

Thankfully, a port of `asciinema` for Windows exists in the form of **`PowerSession-rs`**[^linktopowersession] exists, and it has the *most*[^aththemomentpowersession] of the same commands so it can be used as a drop-in replacement for `asciinema` on Windows (which is an absolute blessing[^oneslight] for people chained to Windows like myself).  

[^oneslight]: One slight however: it only supports PowerShell.

[^aththemomentpowersession]: At the time of writing `PowerSession-rs` does not yet support (playing recordings from a URL)[https://github.com/Watfaq/PowerSession-rs/issues/22] or the [idle time limit option](https://github.com/Watfaq/PowerSession-rs/issues/42) from `asciinema play`, among other features.

[^iactuallyinstalled]: I actually installed `asciinema` on my Windows-based laptop via `pip` with no issues, only to run into errors when trying to record via `asciinema rec`, and *then* when I googled the errors I came across the [GitHub issues](https://github.com/asciinema/asciinema/issues/47) mentioning that the program isn't even designed to run on Windows.

[^linktopowersession]: [github.com/Watfaq/PowerSession-rs](https://github.com/Watfaq/PowerSession-rs)

### Problem 2: GitHub

GitHub READMEs don't render `<script>` tags, which means that while you can technically include an image[^youcangetansvg] that links to a recording on [asciinema.org](https://asciinema.org/) like the below, it will only play the recording after navigating to an external link, which means you can't get a cool README where there's an autoplaying video of the code like at [github.com/tqdm/tqdm](https://github.com/tqdm/tqdm).

[^youcangetansvg]: You can get an SVG of the default preview frame for the `asciinema` recording by appending `.svg` to the recording's URL (e.g. `https://asciinema.org/a/bJMOlPe5F4mFLY0Rl6fiJSOp3.svg` for `https://asciinema.org/a/bJMOlPe5F4mFLY0Rl6fiJSOp3`)

GitHub does, however, allow for embedding GIFs and animated SVGs, which is where `agg` comes in.

# `agg`

[`agg`](https://github.com/asciinema/agg)[^agg] is a CLI tool[^thesuccessor] for generating GIF files from `asciinema` recordings[^thefileformat], and it's built using Rust so you need to use `cargo` to install it (which of course necessitates having installed Rust[^whichyoushouldhave]).

[^agg]: [github.com/asciinema/agg](https://github.com/asciinema/agg)

[^thesuccessor]: The successor to the now-deprecated [`asciicast2gif`](https://github.com/asciinema/asciicast2gif)

[^thefileformat]: Stored using the [`asiicast-v2` file format](https://github.com/asciinema/asciinema/blob/main/doc/asciicast-v2.md).

[^whichyoushouldhave]: Which you should have already done since that's how [Typst](https://github.com/typst/typst) is written & packaged, and Typst is so good that it deserves being install on all computers.

## Usage

### `agg <asciicast_filename/url> <output_gif_filename>`

You can use `agg` for rendering GIFs from a local asciicast `.cast` recording or from  URL like the below:

```{.bash}
agg input.cast output.gif
```

```{.bash}
agg https://asciinema.org/a/569727 output.gif
```

There are also a large number of adidtional options available to customize the look of the generated GIF[^seethewholelistat], including setting:

```{.python }
--font-family <FONT_FAMILY> #<<
    Specify font family [default: "JetBrains Mono,Fira Code,SF Mono,Menlo,Consolas,DejaVu Sans Mono,Liberation Mono"]

--font-size <FONT_SIZE> #<<
    Specify font size (in pixels) [default: 14]

--idle-time-limit <IDLE_TIME_LIMIT> #<<
    Limit idle time to max number of seconds [default: 5]

--line-height <LINE_HEIGHT> #<<
    Specify line height [default: 1.4]

--speed <SPEED> #<<
    Adjust playback speed [default: 1]

--theme <THEME> #<<
    Select color theme [possible values: asciinema, dracula, monokai, solarized-dark, solarized-light, custom]
```

[^seethewholelistat]: View the whole list of options via `agg -h` or at [github.com/asciinema/agg#usage](https://github.com/asciinema/agg#usage).

## Where `agg` falls flat

The trouble with `agg` however is that the GIF encoder[^gifencoderused] used produces very high quality files at the cost also very high file sizes (which is fine for a handful of GIFs on a GitHub README but can potentially be a strain on resources if displayed on, say, a webpage).

[^gifencoderused]: [github.com/ImageOptim/gifski](https://github.com/ImageOptim/gifski)

To remedy that, we can use [**`svg-term-cli`**][^svg-term-cli], which is designed for rendering asiicast recordings to animated SVGs.

[^svg-term-cli]((https://github.com/marionebl/svg-term-cli))

# `svg-term-cli`

## Why animated SVGs instead of GIFs

For one, animated SVGs are able to look a *lot* more crisp at larger resolutions than GIFs by using vector images instead of pixel based animation. Adding on to that (and why you should be using animated SVGs instead of GIFs when embedding recordings on websites), this also allows animated SVGs to have a *much* smaller file size[^since], which is a very nice combination of features, making `svg-term-cli` almost[^wewillgettothis] the ideal tool for rendering your `asciinema` recordings.

[^wewillgettothis]: To find out why it's *almost* ideal (instead of just being ideal), continue reading to the *Where `svg-term-cli` falls flat* section.

## Usage

After installing `svg-term-cli` via `npm install -g svg-term-cli`[^yesthisis], you can render a local `asciicast` file or a recording at a URL to an animated SVG using the following:

```{.bash}
svg-term --cast=<filename/url> --out output.svg
```

`svg-term-cli`, too, has optional arguments for customizing the rendered SVG's appearance; some standout options that *aren't* present in either of the previous tools include:

- disabling cursor rendering via `--no-cursor [boolean]`
- setting distance between text and image bounds via `--padding [number]`
- rendering with MacOS window decorations via `--window [boolean]`

[^yesthisis]: Yes, this is in fact a Node.js application. 

## Where `svg-term-cli` falls flat

Unfortunately, it's been 5 years and counting since the last commit[^andthatwas] made to the `svg-term-cli` project, so while it still works at the time of writing, we're probably not going to be able to expect any of the 25 open issues to be closed anytime soon (at least not until someone forks the repo and resuming maintainance for the project).

[^andthatwas]: And that wasn't even anything meaningful to the codebase, just some edits to documentation, the last real commit actually modifying some code was **7** years ago in 2018.