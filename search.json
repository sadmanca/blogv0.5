[
  {
    "objectID": "posts/2020-11-09-why-i-use-trello/index.html",
    "href": "posts/2020-11-09-why-i-use-trello/index.html",
    "title": "Why I use Trello",
    "section": "",
    "text": "inbox = ['new email'] * 1000\n\nfor email in inbox:\n    print(\"📧 Deleting... Archiving... Ignoring... 😅\")\n\nprint(\"🎉 Inbox zero achieved! Time for a victory dance! 💃\")\nEverybody needs a system for making their to do list. It doesn’t matter if it’s a bullet journal or some fancy system built in Jira or a sticky note that you have on your desk. Since I was first introduced to it, I’ve been rocking Trello as my default to do list and project (read: life) management software."
  },
  {
    "objectID": "posts/2020-11-09-why-i-use-trello/index.html#the-kanban-system",
    "href": "posts/2020-11-09-why-i-use-trello/index.html#the-kanban-system",
    "title": "Why I use Trello",
    "section": "The Kanban System",
    "text": "The Kanban System\nTrello is a (free!) visual project management tool that is based on the kanban system of getting things done. In Trello, the overarching unit used is the board. Each board contains a series of lists, each with a bunch of cards attached. You can easily drag and drop cards between lists, and even send or copy cards (and lists themselves) between boards.\n\n\n\nTrello Kanban System\n\n\nIf we left it at that, Trello would’ve been a nice, simple tool for building to do lists. But it gets better."
  },
  {
    "objectID": "posts/2020-11-09-why-i-use-trello/index.html#within-cards",
    "href": "posts/2020-11-09-why-i-use-trello/index.html#within-cards",
    "title": "Why I use Trello",
    "section": "Within Cards",
    "text": "Within Cards\nWithin each card, you have a smorgasbord of options. You can add a description, a due date, a series of checklists (that’s right, folks, you get lists within lists), colourful labels, and so much more. You an share boards between people and assign them to different cards, allowing you to use Trello as a simple to do list but offering the flexibility of more for complex projects.\n\n\n\nWithin Cards"
  },
  {
    "objectID": "posts/2020-11-09-why-i-use-trello/index.html#how-i-use-it",
    "href": "posts/2020-11-09-why-i-use-trello/index.html#how-i-use-it",
    "title": "Why I use Trello",
    "section": "How I Use It",
    "text": "How I Use It\nThere’s no strict rules regarding how you need to use Trello. Personally, I try to keep the number of boards I use limited and instead focus on organizing my life into boards that sometimes overlap with each other. For example, I have a board exclusively for schoolwork, which has some cards integrated from my side projects board so I can keep track of everything on my to-do list and avoid having tasks fall into the cracks of my schedule. I also have boards for various extracurriculars, making keeping track of them a much more smooth process than before I used Trello.\n\n\n\nHow I Use It"
  },
  {
    "objectID": "posts/2020-11-09-why-i-use-trello/index.html#powering-up",
    "href": "posts/2020-11-09-why-i-use-trello/index.html#powering-up",
    "title": "Why I use Trello",
    "section": "Power(ing)-Up",
    "text": "Power(ing)-Up\nWhile Trello has a couple paid tiers, the free version is going to be enough for most people (it’s definitely enough for me). The one thing you do lose out on with the free version is Power-Ups, which are effectively extensions that add even more functionality to Trello (some are even made by the developers at Trello!).\nSome examples of Power-Up functionality include showing due dates on a calendar (which can be synced with your calendar software of choice), showing the number of days left before a due date (I use this a lot) integrations with cloud services like Google Drive, and so much more. Unfortunately, you’re only allowed 1 Power-Up per board with the free version.\n\n\n\nPower-Ups\n\n\nEven with only a single Power-Up, Trello is an absolute banger of a tool to use if you’re looking for something that can help you organize everything, from your Mom’s birthday to your projects at work, in one place. A lot of tools try to do everything at once, and end up doing mediocre at best for whatever they try to do. Trello is an example of the rare tool that pulls it off."
  },
  {
    "objectID": "posts/2020-10-03-how-i-deal-with-email/index.html",
    "href": "posts/2020-10-03-how-i-deal-with-email/index.html",
    "title": "How I deal with email",
    "section": "",
    "text": "inbox = ['new email'] * 1000\n\nfor email in inbox:\n    print(\"📧 Deleting... Archiving... Ignoring... 😅\")\n\nprint(\"🎉 Inbox zero achieved! Time for a victory dance! 💃\")\nI know a lot of people loathe the experience of email. For many, reaching inbox zero is tantamount to spending more hours than there are in a day (that is, if you deal with every email accordingly instead of simply deleting most of them and ignoring the ordeal entirely).\nThe thing about email is that email itself is not what most people dread. As the default communication channel, it’s one of the easiest ways to contact other individuals or groups in a formal manner. Virtually everyone has an email address; not everyone has a Twitter account, or is willing to default to it for communications.\nWhat sucks about email is not the emails themselves, but rather dealing with what ends up being a bottomless ocean in your inbox. When you can’t change the email that’s coming into your inbox, you need to work on the system you use to deal with the emails that you receive.\nThe key is to reduce the amount of time you spend fighting with your inbox to keep it empty (or as empty as possible), and to avoid the stress that comes with the number beside your inbox button showing you how many unread emails you still have to get through."
  },
  {
    "objectID": "posts/2020-10-03-how-i-deal-with-email/index.html#tip-1-use-keyboard-shortcuts",
    "href": "posts/2020-10-03-how-i-deal-with-email/index.html#tip-1-use-keyboard-shortcuts",
    "title": "How I deal with email",
    "section": "Tip 1: Use Keyboard Shortcuts",
    "text": "Tip 1: Use Keyboard Shortcuts\nAs somebody who codes, I can tell you with confidence that the keyboard, when used properly, can be much faster than a mouse or touchpad when you need to get things done. No matter what your email client of choice (I use Gmail), it probably has several keyboard shortcuts for actions like deleting, archiving, labelling, and more.\nGetting familiar with some of these shortcuts can help you deal with multiple emails quickly (or quickly undo send when you realize you’ve made a typo!). What’s more, these shortcuts can be usually remapped as well, lending you even more control over the fine details of your inbox."
  },
  {
    "objectID": "posts/2020-10-03-how-i-deal-with-email/index.html#tip-2-sort-your-emails",
    "href": "posts/2020-10-03-how-i-deal-with-email/index.html#tip-2-sort-your-emails",
    "title": "How I deal with email",
    "section": "Tip 2: Sort Your Emails",
    "text": "Tip 2: Sort Your Emails\nOne of the most useful features of any email client is the ability to add custom labels, enabling you to organize your emails in any way you see fit. The key with sorting your emails is to never leave anything in your inbox at read.\nWhenever I read an email and I don’t delete it immediately, I add a label that distinguishes between emails that need immediate attention, emails that can be dealt with a later date, or emails that just need to be archived under a specific label for future reference. This way, I have specific lists of emails of different priorities that need to be dealt with, allowing me to prioritize my work and preventing my inbox from being cluttered up with a variety of different emails.\nYou can also create different rules and filters to automatically sort your inbox and make your job even easier. For example, you can set all emails from your colleagues to fall under the ‘Work’ label, or emails from newsletters to fall under the ‘Newsletters’ label."
  },
  {
    "objectID": "posts/2020-10-03-how-i-deal-with-email/index.html#tip-3-batch-time-spent-on-email",
    "href": "posts/2020-10-03-how-i-deal-with-email/index.html#tip-3-batch-time-spent-on-email",
    "title": "How I deal with email",
    "section": "Tip 3: Batch Time Spent on Email",
    "text": "Tip 3: Batch Time Spent on Email\nIt can be very tempting to check your inbox every 15 minutes or so, especially if you’re working on something that might not be very exciting and there’s a lull in the action, but it’s crucial to batch sending and dealing with email so you don’t break your focus by diverting your attention between multiple tasks at a time. At its core, multitasking is simply switching focus between tasks really quickly. It’s inefficient, and the last thing you want when dealing with email is to be inefficient.\nInstead of checking your email whenever you feel like it, it’s worth it to schedule one or two blocks in your day to deal with your inbox. Having the time blocked out in your day can help avoid the temptation of checking your emails eerie now and then. For example, I schedule all my email tasks after an hour of focused work in the morning, after my lunch in the afternoon, and before dinner in the evening. Sticking to this schedule religiously has allowed me to stay on top of my inbox while wasting as little time as possible.\nThe best thing about building a system for email is that you only need to build it once. With email being such a core part of our work, being able to process email more efficiently saves you a lot of time and stress over time."
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "",
    "text": "Whether you’re a new applicant to engineering/computer science at the University of Toronto (UofT) or someone who’s going through their first, second, or even third or fourth years, you’ve probably been curious at one point or another about what jobs are actually posted on the much acclaimed1 PEY Co-op job board2 for 12-16 month positions .\nWell, as a computer engineering student at UofT who’s just finished their third year (and who’s consequently been able to access the portal for the past two semesters), I thought it would be interesting to my own little data collection on the topic, along with some analysis on recurring patterns3 (e.g. locations, international opportunities, etc.), and share both my findings and the raw data (thousands of jobs posted across several months) so that future PEY Co-op students can get a better idea of what they can expect from the portal4.\nFor a sneak peek at the data, try running the SQL query below."
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#what-you-can-expect-from-the-job-board",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#what-you-can-expect-from-the-job-board",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "What you can expect from the job board",
    "text": "What you can expect from the job board\nThe landing page7 for the PEY Co-op job board hosts the same look as the one for all the cross-institutional job boards at UofT’s CLNx and uses the same organization of elements and processes for browsing, searching for, and applying to job postings, so if you’re a UofT student who’s used CLNx in the past8 you already know what it’s like to experience using the PEY job board.\n7 Note: you need to sign in using your UofT credentials before you can access this.8 e.g. for applying to work study positions.\n\n\n\n\n\nThe PEY Co-op job board landing page (Job Postings).\n\n\n\n\n\nViewed jobs (Viewed). Note: the page shows that I’ve viewed 2164 jobs on the portal, even though there were only ~1.8k PEY Co-op positions ever posted (as you’ll learn later on). Why’s that? Well, the remaining ~300 jobs are actually from when the portal opened up for my cohort’s PEY Co-op summer work-term (12-16 weeks). I’ll leave a post diving into summer job postings for sometime in the future.\n\n\n\n\n\n\n\n\nAdvanced search options (Search Job Postings).\n\n\n\n\n\n\nSample job postings\nYour average PEY job postings look like the below. Note: The design on the left was used for a couple years, until the most recent redesign in late 2023 (which took place halfway through my fall semester of third year). If you’re an upcoming PEY Co-op student, job postings should look like the right for you.\n\n\n\n\n\n\nOld design for PEY job postings. One of the earliest jobs to be posted on the job board for my cohort (2T5) in 2023. Shown: ML Developer - Software Automation & Developer Infrastructure @ Cerebras\n\n\n\n\n\n\n\n\nCurrent design for PEY job postings. One of the most recent jobs posted at the time of writing. Shown: Software Developer Intern @ Geotab\n\n\n\n\n\nNothing much to look at, just some basic tables with information about the job and the company, which thankfully are simple to parse."
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#getting-the-posting-date-for-jobs",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#getting-the-posting-date-for-jobs",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "Getting the posting date for jobs",
    "text": "Getting the posting date for jobs\nOne thing that’s been important to me since the very start of this project is making sure that the timestamps of job postings are available to view. As someone who took a few months before I landed a position that I was really satisified with, there were times where I felt a bit apprehensive at turning down offers for roles that I thought were fine but didn’t feel excited about. I had no data beyond anecdotes from upper years about what’s posted over the course of the fall and winter semesters, and so I couldn’t really predict whether that dream role I had in mind was just a couple days from being posted (or whether jobs would start drying up so I should stick with whatever I had at that point in time), which is why I hope that at least one of the things this project of mine can provide is some reassurance to future PEY students about what jobs are posted and when9.\n9 One thing to keep in mind: every year is different, and just because some company posted some number of jobs at some point in time doesn’t mean that they’ll do it again next year. Of course, it also doesn’t mean that they won’t do it again, so make sure your takeaways from the data are taken with a grain of salt.There’s just one problem: there’s absolutely no data indicating when a job was posted.\nWell, except for one thing: the New Posting Since Last Login button on the landing page.\nWhenever you login to the portal, that New Posting Since Last Login button gets updated with links to all of the jobs posted since your last login, so if you were to check the job board every single day and save the data for all of the job postings shown there each time you login, well, then you’ve successfully attributed a posting data for every single job.\nWhich is why that’s exactly what I’ve done for the past 243 days (and counting).\n\nHow I’ve been saving posting dates for jobs\nAnd it’s all thanks to Gildas Lormeau’s10 SingleFile web extension11, which allows for saving a complete web page into a single HTML file (unlike Chrome12). In addition (and rather importantly), the SingleFile extension allows for saving pages for all tabs in the current window (this is important for making the whole archival process a not-headache).\n10 github.com/gildas-lormeau11 While there’s also a CLI tool available, the tricky navigation for the PEY job board website means that manually navigating to pages & then saving them using the extension is a lot easier.12 Chrome and virtually all other browsers have a slightly more complicated setup for saving pages which makes organizing files for saved pages slightly less elegant compared to dealing with just a single file via SingleFile: when you press Ctrl+S on a page, it doesn’t just save that page’s HTML file but also a folder containing all of the media from the page (which, given that none of the job postings contain images, is just one more thing to have to delete).13 Using the Save all tabs option under the SingleFile extension.By CTRL-clicking on every single job posting shown behind New Posting Since Last Login (so that every new posting opens on a new tab) and then using the SingleFile extension to save the page each tab in one go13, I’m able to condense the whole process of saving new postings for the day to just 1-2 minutes. Put each day’s postings into a timestamped folder (made faster thanks to a handy AutoHotKey script that’s always a keyboard shortcut away), which itself goes into a big folder on my local computer of all PEY job postings collected thus far, and I’ve got myself data on almost 2k job postings just waiting to be analyzed for some insights.\n\n\n\n📁PEY POSTINGS ARCHIVE/\n├── 📁2023-09-17_20-14-10/\n│   ├── UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (9_17_2023 8_13_11 PM).html\n│   ├── UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (9_17_2023 8_13_12 PM).html\n│   └── ...\n├── 📁2023-09-18_00-51-40/\n│   ├── Job ID_ _ 43541 UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (9_18_2023 12_51_48 AM).html\n│   ├── Job ID_ _ 43554 UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (9_18_2023 12_52_08 AM).html\n│   └── ...\n├── 📁2023-09-18_16-08-36/\n├── 📁2023-09-18_16-08-36/\n├── 📁2023-09-22_20-29-46/\n├── 📁2023-09-25_20-16-32/\n├── ...\n├── ...\n├── ...\n├── 📁2024-05-16_11-24-45/\n├── 📁2024-05-16_23-55-40/\n├── 📁2024-05-17_11-58-36/\n│   ├── 48007 -_ _ _ _ _ Software Developer Intern (Fall_September 2024, 8-16 Months) - UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (2024-05-17 11_57_42 AM).html\n│   ├── 48013 -_ _ _ _ _ Solutions Engineering Intern (Fall_September 2024, 8-12 Months) - UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (2024-05-17 11_57_42 AM).html\n│   └── 48017 -_ _ _ _ _ Research & Technology - Engineering Program Management Intern - UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (2024-05-17 11_57_42 AM).html\n├── 📁2024-05-17_14-12-49/\n└── 📁2024-05-17_16-25-26/\n\n\nFigure 1: A snapshot of my local directory structure with HTML pages for saved job postings. You might notice that the naming convention for HTML files are different across the 3 folders shown. That’s because my file naming system did indeed change 3 times over the course of my two semesters, including due to the job board redesign and my reconfiguring of options for SingleFile.\n\n\n\n\n\nWhy not write a script to automate saving postings?\nIs it possible to automate the whole process of saving data for job postings? Technically, yes, it’s absolutely feasible, but given how easy it is manually save data for job postings in a minute or two for every couple hundred of jobs (with the assistance of a few scripts to make the CTRL-clicking a lot faster), it’s just not worth the time to make the routine task more efficient14 (I’d be spending more time than I’d save, as any XKCD enjoyer can relate to15).\n14 \n\n\nxkcd: “Automation”\n\n\n15 \n\n\nxkcd: “Is It Worth the Time?”"
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#extracting-data-from-html",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#extracting-data-from-html",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "Extracting data from HTML",
    "text": "Extracting data from HTML\nIf it were just a single page, I could use something like Microsoft Edge’s Smart Copy or the Table Capture extension and call it a day, but extracting data from &gt;20k pages is a whole different ballgame.\nThe HTML code for each job posting page doesn’t have the best formatting19, but thanks to everything being stored in tables I can just use Python’s trusty BeautifulSoup4 library on my locally saved HTML pages and get the text in every table data cell in less than 50 lines of code:\n19 The page for the Cerebras position above has 3506 empty lines with only 809 lines dedicated to actual code, and the HTML code on non-empty lines isn’t exactly the most pleasing to read:\n\n\n\nsample_job.html\n\n&lt;!-- Job ID_ _ 43628 UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (9_18_2023 12_52_04 AM).html --&gt;\n\n&lt;div class=orbisModuleHeader&gt;\n&lt;div class=row-fluid&gt;\n&lt;div class=span2&gt;\n&lt;div style=text-align:center&gt;\n&lt;h1&gt;\nJob ID\n: 43628\n&lt;/h1&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=span7&gt;\n&lt;h1&gt;\nML Developer - Software Automation &amp; Developer Infrastructure\n&lt;/h1&gt;\n&lt;h5&gt;\n\nCerebras Systems - Computer Science\n&lt;/h5&gt;\n&lt;/div&gt;\n&lt;div class=span3&gt;\n\n&lt;ul class=pager&gt;\n\n&lt;li&gt;\n&lt;a href=javascript:void(0)&gt;&lt;i class=icon-chevron-left&gt;&lt;/i&gt;Back to Overview&lt;/a&gt;\n&lt;/li&gt;\n\n&lt;!-- ... --&gt;\n\n\n\nparse.py\n\nimport argparse\nfrom bs4 import BeautifulSoup\n\ndef parse_html_file(filepath, verbose=False):\n    with open(filepath, 'r', encoding='utf-8') as file:\n        html_content = file.read()\n\n    soup = BeautifulSoup(html_content, 'lxml')\n\n    data = {}\n    rows = soup.find_all('tr')  # find all table rows\n\n    for row in rows:\n        tds = row.find_all('td')  # find all table data cells\n\n        if len(tds) &gt;= 2:\n            label_td = tds[0]\n            label_text = '\\n'.join(label_td.stripped_strings)\n\n            value_td = tds[1]\n            value_text = '\\n'.join(value_td.stripped_strings)\n\n            data[label_text] = value_text\n\n    if verbose:\n        for key, value in data.items():\n            print(f\"{key}: {value}\")\n    else:\n        print(\"Parsing completed.\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Parse HTML for 2 column table data.\")\n    parser.add_argument(\"-f\", \"--filepath\", required=True, help=\"Path to the HTML file to be parsed.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Print parsed data.\")\n\n    args = parser.parse_args()\n    parse_html_file(args.filepath, args.verbose)\n\n\nTrying out the quickly-written parse.py script on one of the saved HTML pages, and it’s able to get all of the values for all of the table fields with no issues:\n\n\n\n\n\n\n\n$ python parse.py --verbose --filepath \"Job ID_ _ 43628 UofT Engineering Career Centre - MyAccount - Co-op & Experience Programs - Job Postings (9_18_2023 12_52_04 AM).html\"\n\nPosition Type:: Professional Experience Year Co-op (PEY Co-op: 12-16 months)\nJob Title:: ML Developer - Software Automation & Developer Infrastructure\nJob Location:: Toronto\nJob Location Type:: Flexible\nIf working on site, can you provide a copy of your COVID-19 safety protocols?:: No\nNumber of Positions:: 1\nSalary:: $42.00 hourly for 40.0 hours per week\nStart Date:: 05/06/2024\nEnd Date:: 04/25/2025\nJob Function:: Information Technology (IT)\nJob Description:: Cerebras Systems has pioneered a groundbreaking chip and system that revolutionizes deep learning applications. Our system empowers ML researchers to achieve unprecedented speeds in training and inference workloads, propelling AI innovation to new horizons.\nThe Condor Galaxy 1 (CG-1), unveiled in a recent announcement, stands as a testament to Cerebras' commitment to pushing the boundaries of AI computing. With a staggering 4 ExaFLOP processing power, 54 million cores, and 64-node architecture, the CG-1 is the first of nine powerful supercomputers to be built and operated through an exclusive partnership between Cerebras and G42. This strategic collaboration aims to redefine the possibilities of AI by creating a network of interconnected supercomputers that will collectively deliver a mind-boggling 36 ExaFLOPS of AI compute power upon completion in 2024.\nCerebras is building a team of exceptional people to work together on big problems. Join us!.\nAbout The Role\nAs a Machine Developer - Software Automation & Developer Infrastructure Engineer, you will use your knowledge of testing and testability to influence better software design, promote proper engineering practice, bug prevention strategies, testability, scalability, and other advanced quality concepts. The position will play a huge role in the quality of Cerebras software. We are looking for engineers that have a broad set of technical skills and who are ready to tackle the biggest at-scale problems in HW-based deep learning accelerators.\nResponsibilities\nWrite scripts to automate testing and create tools to allow easy development of software regression tests\nHelp identify weak spots and potential customer pain points and drive the software organization towards customer focused quality metrics\nImplement creative ways to break software and identify potential problems\nContribute to developing requirements specifications with a focus on developing verification tests\nJob Requirements:: Requirements\nEnrolled within University of Toronto's PEY program with a degree in Computer Science, Computer Engineering, or any other related discipline\nExperience in developing automated tests for compute/machine learning or networking systems within a large-scale enterprise environment\nAbility to take responsibility for monitoring product development and usage at all levels with an end goal toward improving product quality\nStrong knowledge of software system design, C++ and Python\nPreferred\nStrong software testing experience with a proven track record in scaling highly technical teams\nKnowledge of UNIX/Linux and Windows environments\nKnowledge of neural network architecture and ML/AI deep learning principles\nPrior experience in designing and developing test automation for HW systems involving ASICs or FPGAs\nPrior experience working with live hardware systems and debug tools operating in a real time environment such as networking devices or live computing systems\nPreferred Disciplines:: Computer Engineering\nComputer Science\nEngineering Science (Electrical and Computer)\nEngineering Science (Infrastructure)\nEngineering Science (Machine Intelligence)\nEngineering Science (Robotics)\nAll Co-op programs:: No\nTargeted Co-op Programs:: Targeted Programs\nProfessional Experience Year Co-op (12 - 16 months)\nApplication Deadline:: Nov 1, 2023 11:59 PM\nApplication Receipt Procedure:: Online via system\nIf by Website, go to:: https://www.cerebras.net/careers/?gh_jid=5321500003\nAdditional Application Information:: Please apply with\nboth resume & transcript.\nLacking transcript will disqualify you from being considered.\nNote that applications will be considered on a rolling basis. Apply as early as possible.\nNote to PEY Co-op applicants: In addition to your application by email/website, please ensure that you select the “I intend to apply for this position” tab on the portal.  This will give us a record of your submitted application in the event that you will be invited for interviews.\nU of T Job Coordinator:: Yasmine Abdelhady\nOrganization:: Cerebras Systems\nDivision:: Computer Science\nWebsite:: https://cerebras.net/\nLength of Workterm:: FLEXIBLE PEY Co-op: 12-16 months (range)\n\n\n\n\n\nFinetuning data extraction\nThere’s a few nuances to the data extraction that mean this simple script needs just a bit more extending so it can properly parse the entire local dataset. I’m getting the text corresponding to any inline links, but the links themselves aren’t included since they’re within the html &lt;a&gt; tags, so I need to add handling for those as well. Another nuance is the fact that the formatting for HTML pages has changed20 (several times actually) over the course of the last two semesters. Since the location of the data has always remained in tables, that’s largely a non-issue. While the job title and company name included in the header above any table on job posting pages are currently missed by the script, that data is also present in the tables below (and extracted by the script properly), so that, too, is a non-issue. With one exception: job IDs aren’t extracted. Luckily, I had the foresight to configure SingleFile to include the job ID automatically as part of the filename for each HTML page back when I started the archival process, so I can add some logic to parse that as well. Unluckily, however, there were a few periods of time where that configuration was lost21, so I’m going to have to do some file contents parsing regardless.\n20 At times purposefully by myself (e.g. adding Job ID and later Job Title to filenames for saved HTML files for easier file browsing and duplication checking), and at times by the university (i.e. there was a big redesign of the job board that took place in the latter half of the fall semester, which made it so the PEY job board uses the same frontend design as job boards on CLNx, whereas prior to that it looked a bit different despite functionally working the same).21 At one point, all of my extensions were uninstalled somehow (probably due to a Chrome update gone wrong), and so I had forgotten to reconfigure SingleFile to include job IDs in the saved filenames for many ways until I got some free time and was able to pore over my notes (and reconfigure everything back to the way it was).22 One for the old design, and the other for the new design.A quick manual parsing of the different HTML files shows that there’s only two different locations22 that job IDs can be located, so I can just add another function to try and find the job ID located at either location in all files and I’m now able to extract all the job IDs as well:\n\n\n\nparse.py\n\nimport argparse\nfrom bs4 import BeautifulSoup\nimport re \n\ndef extract_job_id_from_html(soup): \n    # try to find job ID in a &lt;h1&gt; tag with the specific class \n    header_tag = soup.find('h1', class_='h3 dashboard-header__profile-information-name mobile--small-font color--font--white margin--b--s') \n    if header_tag: \n        header_text = header_tag.get_text(strip=True) \n        match = re.match(r'^(\\d+)', header_text) \n        if match: \n            return match.group(1) \n\n    # if not found, try to find an &lt;h1&gt; tag containing the words \"Job ID\" \n    job_id_tag = soup.find('h1', string=re.compile(r'Job ID', re.IGNORECASE)) \n    if job_id_tag: \n        job_id_text = job_id_tag.get_text(strip=True) \n        match = re.search(r'Job ID\\s*:\\s*(\\d+)', job_id_text, re.IGNORECASE) \n        if match: \n            return match.group(1) \n\n    return None \n\ndef parse_html_file(filepath, verbose=False):\n    with open(filepath, 'r', encoding='utf-8') as file:\n        html_content = file.read()\n\n    soup = BeautifulSoup(html_content, 'lxml')\n\n    data = {}\n    job_id = extract_job_id_from_html(soup) \n    if job_id: \n        data['Job ID'] = job_id \n\n    rows = soup.find_all('tr')  # find all table rows\n\n    for row in rows:\n        tds = row.find_all('td')  # find all table data cells\n\n        if len(tds) &gt;= 2:\n            label_td = tds[0]\n            label_text = '\\n'.join(label_td.stripped_strings)\n\n            value_td = tds[1]\n            value_text = '\\n'.join(value_td.stripped_strings)\n\n            data[label_text] = value_text\n\n    return data\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Parse HTML for 2 column table data.\")\n    parser.add_argument(\"-f\", \"--filepath\", required=True, help=\"Path to the HTML file to be parsed.\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Print parsed data.\")\n\n    args = parser.parse_args()\n    data = parse_html_file(args.filepath, args.verbose)\n\n    if args.verbose:\n        for key, value in data.items():\n            print(f\"{key}: {value}\")\n    else:\n        print(\"Parsing completed.\")\n\n\nNow with a method of easily extracting all the relevant data from each HTML page, all that’s left is to automate running the parser across all files saved within timestamped subdirectories on my local computer and pipe the data into a SQLite DB."
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#storing-data-in-sqlite",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#storing-data-in-sqlite",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "Storing data in SQLite",
    "text": "Storing data in SQLite\n\nWhy SQLite?\nSQLite sits right there in the sweet middle spot between raw data formats (like CSV, JSON) that are good fits for simple data (e.g. temperature, word lists) but aren’t as great for larger datasets with more complexity (especially when it comes to data analysis) and other larger RDBMS23 libraries that might be better designed for scaleability but are really just overkill for the little pet project that I have here at hand.\n23 relational database management systemAnd the fact that SQLite is a single file on disk means that sharing the finely extracted and processed data is a lot easier too, which is important for me because I want future PEY co-op students to learn what they can from the dataset and better set their expectations for what to expect from program (and I hope the data helps prospective UofT students better make their admission decisions as well).\nMost importantly, SQLite is serverless (unlike PostgreSQL or MySQL), which saves me a lot of headache and setup24 for this relatively small-scale project.\n24 Especially since sqlite3 is built into Python’s standard library!\n\nPipelining data from ~2k HTML files to a single SQLite DB\nUsing SQLite with Python via sqlite3 is simple enough25. All I need to do is add some additional code for extracting the job posting date from the parent folder for each job posting’s HTML page and for iterating across every subfolder for PEY job postings on my local computer, as well as draft up a schema for the SQLite DB and write some code for piping data from Python dictionaries to the DB file.\n25 https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3\nDatabase Schema\nThankfully, all job postings share largely26 the same fields, so (for the time being27) the schema just ends up being an amalgamation of all the relevant table fields:\n26 One small slight is that Application Receipt Procedure and Application Method are often used interchangeably (Application Receipt Procedure largely before the redesign, and Application Method after), and when one field is used the other is usually left blank (except for some positions which use both, meaning that I can’t exactly combine them into a single field without losing data; e.g. sometimes Application Method for a posting states to use the built-in applicant tracking system while Application Receipt Procedure states to use some company link, which is likely just attributable to job posters sticking with the default options when creating a new post). It’s largely a non-issue, and after some further exploration into the specific overlapping data I should be able to easily combine both into a single field.27 I could potentially extend the schema with functional dependencies for repetitive data like company names, although it’s really only company and maybe a few other fields where values are guaranteed to repeat (Job Location Type, Salary, etc. can vary wildly and use combinations of text or integers, so there’s not much we can do to unify them) so it’s not the best representation for a general-purpose database (lossy conversions can always be made for analysis).\n\nparse_to_db.py\n\n# ...\n\ndef store_data_in_db(data, db_cursor):\n    columns = ', '.join([f'\"{key}\"' for key in data.keys()])\n    placeholders = ', '.join(['?' for _ in data.values()])\n    sql = f'INSERT INTO \"JobPosting\" ({columns}) VALUES ({placeholders})'\n    try:\n        db_cursor.execute(sql, tuple(data.values()))\n    except sqlite3.IntegrityError:\n        logging.info(\"Integrity Error: Skipping row\")\n        pass\n\ndef create_db_schema(db_cursor):\n    db_cursor.execute('''\n    CREATE TABLE IF NOT EXISTS JobPosting ( \n        id INTEGER, \n        postingDate DATE, \n        title TEXT, \n        company TEXT, \n        companyDivision TEXT, \n        companyWebsite TEXT, \n        location TEXT, \n        locationType TEXT, \n        numPositions INTEGER, \n        salary TEXT, \n        startDate TEXT, \n        endDate TEXT, \n        function TEXT, \n        description TEXT, \n        requirements TEXT, \n        preferredDisciplines TEXT, \n        applicationDeadline TEXT, \n        applicationMethod TEXT, \n        applicationReceiptProcedure TEXT, \n        applicationDetails TEXT, \n        PRIMARY KEY(id, postingDate) \n    ) \n    ''')\n\nif __name__ == \"__main__\":\n    # ...\n\n\n\nParsing to .db\nFinally, with some additional code for properly parsing through all subfolders in my local directory and setting the postingDate value based on the folder name28 for each file, I can transform the entire dataset of &gt;1.8k job postings into a single .db file under 10MB in size in ~3 min29.\n28 e.g. 📁2023-09-17_20-14-10; easily achievable thanks to github.com/sadmanca/ahk-scripts/blob/master/keys.ahk29 Which’d probably take even less time if it weren’t running on an old spinning hard drive.\n\n\nparse_to_db.py\n\nimport argparse\nfrom bs4 import BeautifulSoup\nimport re\nimport os\nimport sqlite3\nfrom tqdm import tqdm\nimport logging\n\ndef extract_job_id_from_html(soup):\n    # Try to find job ID in a &lt;h1&gt; tag with the specific class\n    header_tag = soup.find('h1', class_='h3 dashboard-header__profile-information-name mobile--small-font color--font--white margin--b--s')\n    if header_tag:\n        header_text = header_tag.get_text(strip=True)\n        match = re.match(r'^(\\d+)', header_text)\n        if match:\n            return match.group(1)\n\n    # If not found, try to find an &lt;h1&gt; tag containing the words \"Job ID\"\n    job_id_tag = soup.find('h1', string=re.compile(r'Job ID', re.IGNORECASE))\n    if job_id_tag:\n        job_id_text = job_id_tag.get_text(strip=True)\n        match = re.search(r'Job ID\\s*:\\s*(\\d+)', job_id_text, re.IGNORECASE)\n        if match:\n            return match.group(1)\n\n    return None\n\ndef parse_html_file(filepath, job_posting_date, verbose=False):\n    with open(filepath, 'r', encoding='utf-8') as file:\n        html_content = file.read()\n\n    soup = BeautifulSoup(html_content, 'lxml')\n\n    # Extract the year, month, and day from the job_posting_date string\n    posting_date = job_posting_date.split('_')[0]\n    data = {'postingDate': posting_date}\n    job_id = extract_job_id_from_html(soup)\n    if job_id:\n        data['id'] = job_id\n\n    rows = soup.find_all('tr')  # find all table rows\n\n    for row in rows:\n        tds = row.find_all('td')  # find all table data cells\n\n        if len(tds) &gt;= 2:\n            label_td = tds[0] \n            label_text = '\\n'.join(label_td.stripped_strings).replace(':', '') \n\n            value_td = tds[1] \n            value_text = '\\n'.join(value_td.stripped_strings) \n\n            links = value_td.find_all('a') \n            for link in links: \n                url = link.get('href') \n                link_text = link.get_text() \n                value_text = value_text.replace(link_text, f'{link_text} ({url})') \n\n            # Map label_text to corresponding database column \n            column_mapping = { \n                # 'Job ID': 'id', \n                # 'Job Posting Date': 'postingDate', \n                'Job Title': 'title', \n                'Organization': 'company', \n                'Division': 'companyDivision', \n                'Website': 'companyWebsite', \n                'Job Location': 'location', \n                'Job Location Type': 'locationType', \n                'Number of Positions': 'numPositions', \n                'Salary': 'salary', \n                'Start Date': 'startDate', \n                'End Date': 'endDate', \n                'Job Function': 'function', \n                'Job Description': 'description', \n                'Job Requirements': 'requirements', \n                'Preferred Disciplines': 'preferredDisciplines', \n                'Application Deadline': 'applicationDeadline', \n                'Application Method': 'applicationMethod', \n                'Application Receipt Procedure': 'applicationReceiptProcedure', \n                'If by Website, go to': 'applicationReceiptProcedure', \n                'Additional Application Information': 'applicationDetails', \n            } \n\n            # Check if label_text matches any of the predefined columns \n            if label_text in column_mapping: \n                db_column = column_mapping[label_text] \n                # If key already exists, append the value to it \n                if db_column in data: \n                    data[db_column] += f'\\n{value_text}' \n                else: \n                    data[db_column] = value_text \n\n    return data\n\ndef store_data_in_db(data, db_cursor):\n    columns = ', '.join([f'\"{key}\"' for key in data.keys()]) \n    placeholders = ', '.join(['?' for _ in data.values()]) \n    sql = f'INSERT INTO \"JobPosting\" ({columns}) VALUES ({placeholders})' \n    try:\n        db_cursor.execute(sql, tuple(data.values()))\n    except sqlite3.IntegrityError:\n        logging.info(\"Integrity Error: Skipping row\")\n        pass\n\ndef create_db_schema(db_cursor):\n    db_cursor.execute('''\n    CREATE TABLE IF NOT EXISTS JobPosting (\n        id INTEGER,\n        postingDate DATE,\n        title TEXT,\n        company TEXT,\n        companyDivision TEXT,\n        companyWebsite TEXT,\n        location TEXT,\n        locationType TEXT,\n        numPositions INTEGER,\n        salary TEXT,\n        startDate TEXT,\n        endDate TEXT,\n        function TEXT,\n        description TEXT,\n        requirements TEXT,\n        preferredDisciplines TEXT,\n        applicationDeadline TEXT,\n        applicationMethod TEXT,\n        applicationReceiptProcedure TEXT,\n        applicationDetails TEXT,\n        PRIMARY KEY(id, postingDate)\n    )\n    ''')\n\nif __name__ == \"__main__\":\n    logging.basicConfig(filename='run.log', level=logging.INFO, format='%(asctime)s %(message)s') \n\n    parser = argparse.ArgumentParser(description=\"Parse HTML files in a folder and store data in SQLite DB.\") \n    parser.add_argument(\"-d\", \"--directory\", default=os.getcwd(), help=\"Path to the directory containing HTML  #&lt;&lt;files. Default is the current directory.\") \n    parser.add_argument(\"--db\", default=os.path.join(os.getcwd(), \"job_postings.db\"), help=\"SQLite database  #&lt;&lt;file to store the parsed data. Default is 'job_postings.db' in the directory specified by -d.\") \n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"logging.info parsed data.\") \n\n    args = parser.parse_args() \n\n    conn = sqlite3.connect(args.db) \n    cursor = conn.cursor() \n    create_db_schema(cursor) \n\n    # Get the list of files \n    files = [os.path.join(dirpath, file) for dirpath, _, files in os.walk(args.directory) for file in files if file.endswith('.html') or file.endswith('.htm')] \n\n    # Create a progress bar \n    with tqdm(total=len(files)) as pbar: \n        for subdir, _, files in os.walk(args.directory): \n            job_posting_date = os.path.basename(subdir) \n            for file in files: \n                if file.endswith('.html') or file.endswith('.htm'): \n                    filepath = os.path.join(subdir, file) \n                    logging.info(filepath) \n                    data = parse_html_file(filepath, job_posting_date, args.verbose) \n                    store_data_in_db(data, cursor) \n                    # Update the progress bar \n                    pbar.update(1) \n\n    conn.commit() \n    conn.close() \n    logging.info(\"Parsing and storing completed.\")"
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#sample-queries",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#sample-queries",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "Sample Queries",
    "text": "Sample Queries\n\nWhich companies posted the most number of jobs?\n\nSELECT company, COUNT(*) as num_postings\nFROM JobPosting\nGROUP BY company\nORDER BY num_postings DESC;\n\n\n\n\nWhere are most jobs located?\n\nSELECT location, COUNT(*) as num_postings\nFROM JobPosting\nGROUP BY location\nORDER BY num_postings DESC;\n\n\n\n\nHow many job postings are there for mechatronics-adjacent positions?\n\nSELECT COUNT(*) AS num_mech_postings\nFROM JobPosting\n    WHERE title LIKE '%mechatronic%'\n    OR company LIKE '%mechatronic%'\n    OR companyDivision LIKE '%mechatronic%'\n    OR function LIKE '%mechatronic%'\n    OR description LIKE '%mechatronic%'\n    OR requirements LIKE '%mechatronic%'\n    OR preferredDisciplines LIKE '%mechatronic%';\n\n\n\n\nWhat does a job for a mechatronics-adjacent position look like?\n\nSELECT *\nFROM JobPosting\n    WHERE title LIKE '%mechatronic%'\n    OR company LIKE '%mechatronic%'\n    OR companyDivision LIKE '%mechatronic%'\n    OR function LIKE '%mechatronic%'\n    OR description LIKE '%mechatronic%'\n    OR requirements LIKE '%mechatronic%'\n    OR preferredDisciplines LIKE '%mechatronic%'\nLIMIT 1;\n\nMore to come in part 2!"
  },
  {
    "objectID": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#next-steps",
    "href": "posts/2024-05-22-analyzing-pey-postings-part-1/index.html#next-steps",
    "title": "Analyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data",
    "section": "Next Steps",
    "text": "Next Steps\nYou’ll notice that the data still needs some cleaning32, which is fine, should be fairly simple to do by manually parsing through the dataset and aggregating similar values.\n32 e.g. Toronto and Toronto, ON are present as two distinct locations, when really they should just be one.33 in part 2 of this series!But after some basic data cleaning33 is the fun part: analyzing the data to generate some insights on posted jobs, including…\n\nHow many jobs are posted for chemical/mechanical/mineral/… engineers?\nDuring what periods are the bulk of jobs posted?\nWhen do specific companies post most/all their jobs?\nHow many jobs are reposted34, and which ones?\n…and more! Feel free to suggest exploration ideas in the comments below.\n\n\n\n\n\n34 Something the Engineering Career Centre (ECC) people who run the PEY Co-op job board don’t inform you about ahead of time, employers can “repost” a job with the same job id (usually several weeks) after the original which makes it’ll show up under New Posting Since Last Login even if you’ve already viewed (and even though it’s technically still the same single job posting). It’s not commonplace but it did occur for a few dozen jobs (I imagine for those where the position was left unfilled after some initial batch of students applied and it was reposted to reinvigorate interest)."
  },
  {
    "objectID": "posts/2020-09-25-coming-up-with-good-ideas/index.html",
    "href": "posts/2020-09-25-coming-up-with-good-ideas/index.html",
    "title": "Coming up with (good) ideas",
    "section": "",
    "text": "def generate_ideas(project):\n    ideas = []\n    while not ideas:\n        idea = input(f\"Bad idea for your {project} \"\n                     \"project: \")\n        if idea:\n            ideas.append(idea)\n        else:\n            print(\"Come on, even a bad idea \"\n                  \"is better than none!\")\n    return ideas\n\nproject = \"next big thing\"\nbad_ideas = generate_ideas(project)\nprint(f\"Congrats! You've embraced bad ideas \"\n      f\"for your {project} project.\")\n\nShort post, but it’s important.\nI see this happen all the time.\nYou’re supposed to work on a project. Maybe it’s a presentation you have to give at work. Maybe it’s a YouTube video you plan on making public to the world.\nAnd as you get started on working on it, you’re not sure where to start. You stare at a blank page, perhaps writing a sentence or two, only to delete them and start again at zero.\n\n“I just can’t come up with a good idea”, you say.\n\nThe easiest way to come up with good ideas to be okay with coming up with bad ideas.\nThey don’t need to be original. They don’t need to be awe-inspiring.\nMost important of all, they don’t need to be perfect.\nSome people hesitate to write down an idea because they’re worried it’s not good enough.\nSome people hesitate to share an idea because they’re worried about what others will think.\nChoosing to throw away an idea completely because it’s not what you were looking for, to keep your ideas to yourself, makes you feel safe, because you don’t have to deal with the uncomfortable feeling that comes with doing something no one else thinks about doing, saying something no one else is saying.\nBut in sacrifice for that safety, your ideas cannot grow. They can’t be examined, criticized, or made better.\nThe key is not to eliminate mistakes or bad ideas.\nThe key is to let your bad ideas light the way to some good ones.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{hossain2020,\n  author = {Hossain, Sadman},\n  title = {Coming up with (Good) Ideas},\n  date = {2020-09-25},\n  url = {https://sadman.ca/posts/2020-09-25-coming-up-with-good-ideas},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nHossain, Sadman. 2020. “Coming up with (Good) Ideas.”\nSeptember 25, 2020. https://sadman.ca/posts/2020-09-25-coming-up-with-good-ideas."
  },
  {
    "objectID": "posts/2021-04-13-advice-for-high-school-freshmen/index.html",
    "href": "posts/2021-04-13-advice-for-high-school-freshmen/index.html",
    "title": "Advice for high school freshmen",
    "section": "",
    "text": "As my own high school journey comes to an end, I’ve decided to put together a few of the lessons I’ve learned over the years. I didn’t have much guidance when I was a freshman coming into high school, so the following reflections are really what I would’ve told myself back then if I could do so now.\n\nPrioritize more than just schoolwork\nThis is a big one, and really the biggest lesson you should be taking away from this. Your grades are significant factors that play into university admissions and scholarship decisions. But they’re also not the only factors at play, and I would argue that they’re not the most important either (not just for applications, but for your career and life too). More important than your academics are the experiences that build you as a person; don’t miss out on them. (And what are those experiences, you ask? Read on, and you’re sure to find out…)\n\n\nExplore interests\nThis is something that’s really important once you’re in university, and it can give you a good leg-up if you start taking it seriously in high school. Join clubs related to your interests, even if you’re on the edge about whether you’re genuinely interested in some of them (you can always drop some of them if you lose interest).\nBe it robotics (FIRST Robotics), business (DECA), medicine (Brain Bee), or any of the countless other clubs probably at your school, there is no shortage of cliques you can join. And in the event you don’t find exactly what you’re looking for (or maybe you’re just really passionate about something niche), you can always start your club (it doesn’t have to be limited to your school, either; with tools like Discord and Slack, building an online community is easier than ever, and how most of the clubs at my school operate under COVID-19 restrictions).\nAs for myself, I attribute a lot of my current skills to my time spent on Arctos 6135 (a FIRST Robotics team), not just because of how much I learned while working on the team but also because of the mindset I adopted from my time there and how that’s guided my learning up to where I am today. Don’t be one of those people who miss out on clubs because of how much time they spend studying; in my eyes, they’re the fundamental building blocks of your high school experience.\nIf there is ever an optimal time to test the waters and try out experimental things, high school is it. You’ve got the mental plasticity, maturity, and the time surplus to actually make headway towards accomplishing it. All you really need is motivation to get started (and discipline to get finished).\n\n\nBuild (good) habits\nYour habits now are going to dictate how you live your life going forward; make sure that the habits you’ve got are worth having. Don’t get enough exercise (don’t fool yourself, you know whether or not you need more exercise)? Go to the gym, even just for one day (or join an intramural sport; they’re heaps of fun). Don’t get enough sleep? Establish a strict sleeping schedule and follow it. Don’t see your grades rise despite spending hours studying? Figure out where you’re going wrong (be it in your learning or your remembering of information), and build a better study schedule. The hardest part is almost always getting started, so if you can push yourself to get past even just the first hurdle, you’re already making serious progress towards getting to the end.\n\n\nHave fun\nLast but definitely not the least, go out and have fun. High school is a unique experience that you really only go through once, so make the most of your time there. Come university and who knows what after it, high school is just the beginning of the many radical changes you’re going to experience. So while you make sure to keep your grades up and take part in the many opportunities at your disposal, don’t forget to have some fun. Cultivate relationships, and be sure to nip toxic ones in the bud. Looking back on my own experiences in high school, my interactions with my friends and the joyous memories I have of us together are at the top of the list of things I cherish most about my high school experience. Make them some of yours, too.\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{hossain2021,\n  author = {Hossain, Sadman},\n  title = {Advice for High School Freshmen},\n  date = {2021-04-13},\n  url = {https://sadman.ca/posts/2021-04-13-advice-for-high-school-freshmen},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nHossain, Sadman. 2021. “Advice for High School Freshmen.”\nApril 13, 2021. https://sadman.ca/posts/2021-04-13-advice-for-high-school-freshmen."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sadman Hossain",
    "section": "",
    "text": "Sadman Hossain is a 3rd year computer engineering student at the Univeristy of Toronto. When not creating more AutoHotkey shortcuts for automating the mouse away, Sadman enjoys binge-reading really long sci-fi/apocalyptic/fantasy novels (tracked on Goodreads).\n\n\nschedule.py\n\nif coffee.empty():\n    while not coding:\n        sleep(900)  # Nap time for code monkeys\n        if wake_up_with_idea():\n            break\n    code.write(bug)\n    coffee.refill()\nelse:\n    print(\"☕ Error: Too much coffee, not enough code!\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sadman’s Blog",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\nReading Time\n\n\nDate\n\n\n\n\n\n\n\n\n\nAnalyzing UofT PEY Co-op Job Postings (2023-2024) - Part 1: Scraping Job Board Data\n\n\nCollecting unstructured data on ~2k job postings from UofT’s PEY Co-op job board & pipelining it to a single SQLite DB less than 10MB in size\n\n\n37 min\n\n\nMay 22, 2024\n\n\n\n\n\n\n\nPutting 20k+ words on a 1MB cheatsheet\n\n\nThe art of maximizing content on a cheatsheet while maintaining readability\n\n\n19 min\n\n\nApr 24, 2024\n\n\n\n\n\n\n\nOn keeping a journal\n\n\nWhy you should be writing if you aren’t already\n\n\n4 min\n\n\nMay 8, 2021\n\n\n\n\n\n\n\nAdvice for high school freshmen\n\n\nWhat I would’ve told myself back then if I could do so now\n\n\n4 min\n\n\nApr 13, 2021\n\n\n\n\n\n\n\nA look at my VS Code setup (from long ago)\n\n\nSome snippets of tools I used to use (and might still do too)\n\n\n3 min\n\n\nJan 9, 2021\n\n\n\n\n\n\n\nA guide to learning\n\n\nBetter alternatives to rote memorization\n\n\n5 min\n\n\nDec 14, 2020\n\n\n\n\n\n\n\nWhy I use Trello\n\n\nEverybody needs a system for making their to do list; Trello is mine.\n\n\n3 min\n\n\nNov 9, 2020\n\n\n\n\n\n\n\nHow I deal with email\n\n\nPeople loathe the experience of email. Here’s my system of dealing with it.\n\n\n4 min\n\n\nOct 3, 2020\n\n\n\n\n\n\n\nComing up with (good) ideas\n\n\nSometimes it can be hard to come up with ideas that you think are good. But the point of coming up with ideas is about more than just coming up with good ones.\n\n\n2 min\n\n\nSep 25, 2020\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2020-08-17-on-keeping-a-journal/index.html",
    "href": "posts/2020-08-17-on-keeping-a-journal/index.html",
    "title": "On keeping a journal",
    "section": "",
    "text": "def journal():\n    j = [\"🎈 Hot air balloon &gt; Pajamas\", \n         \"📺 Argued with Netflix, lost.\",\n         {\"Career\": \"🚗 Stuck in traffic\",\n          \"Next\": \"🛣️ Hopefully not traffic\",\n          \"Today\": \"🌬️ Breathing\",\n          \"Tomorrow\": \"🌍 World domination\"}]\n    return j or \"📝 Start journaling.\"\n\nprint(journal())\nI journal everyday. And it’s the one of the best investments I’ve ever made in my personal development and career. It formed the basis of my game plan for the future, and has helped me make decisions more times than I can remember.\nIf you’ve never tried it before, you might be confused as to how the task of simply writing to yourself can be life-changing. But I assure you that it is, in more ways than one."
  },
  {
    "objectID": "posts/2020-08-17-on-keeping-a-journal/index.html#to-plan",
    "href": "posts/2020-08-17-on-keeping-a-journal/index.html#to-plan",
    "title": "On keeping a journal",
    "section": "To plan",
    "text": "To plan\nIt’s easy to be busy. So busy, in fact, that every hour of your day is spent doing something, be it work, watching Netflix, enjoying time with friends or family, or anything in between. It’s not as easy to be productive. To not only place your entire focus on the task at hand, but also to be working on something truly valuable to you.\nIt’s harder to be productive. Harder to make your hours count instead of simply counting your hours. Reflecting in a journal can help you deal with that. It can allow you to take a look into what your current future looks like, and compare it with your ideal one. It can allow you to think past tomorrow, and think instead of 2 months from now, even 2 years from now.\nIt can help you put superficial tasks at the bottom of your to do list while bringing your more important (and perhaps less urgent) tasks towards the top. With life being the biggest project we’re ever going to get, it’s worth planning out how you can best live it."
  },
  {
    "objectID": "posts/2020-08-17-on-keeping-a-journal/index.html#to-refocus",
    "href": "posts/2020-08-17-on-keeping-a-journal/index.html#to-refocus",
    "title": "On keeping a journal",
    "section": "To (Re)focus",
    "text": "To (Re)focus\nWe all fall into an unproductive slump every now and then. It’s not a matter of if, only a matter of when. And while it’s important to build our environment to prevent such days from happening, it’s just as important to know how to get out of such slumps as well.\nChoosing a journal forces you to confront yourself about what you’ve been spending your time on. It’s easy to let an unproductive hour turn into a day. Journaling interrupts that process, allowing you to accept lulls in productivity and get back into the swing of things."
  },
  {
    "objectID": "posts/2020-08-17-on-keeping-a-journal/index.html#to-keep-a-record-of-yourself",
    "href": "posts/2020-08-17-on-keeping-a-journal/index.html#to-keep-a-record-of-yourself",
    "title": "On keeping a journal",
    "section": "To Keep A Record (Of Yourself)",
    "text": "To Keep A Record (Of Yourself)\nKeeping a journal can help you record all the thoughts you have on a particular day. They may be irrelevant, but they also may be inspirational and even educational for you when you get older and reflect on them. Keeping a journal is like taking family photos; you don’t realize their true sentimental value until looking back on them, often years later.\nWhen I ask people I know if they keep a journal, the answer is usually no. Of course, they follow up by saying they know they should, and that they’ll get started at some point.\nUnfortunately, for most people ‘at some point’ is usually equivalent to never. So if you’re reading this write now and haven’t started journaling yet, I implore you to take a minute and just write your thoughts down on a piece of paper. It doesn’t need to be about anything in particular, or even coherent for that matter.\nWrite about how your career has been progressing, about where you feel you’re headed next. Write About what you’ve done today, what you’ve done yesterday, and what you expect to do tomorrow. Write about the fears lingering at the back of your mind. About the things that are stressing you out.\nThe beauty of a journal is that the possibilities for self-reflection are infinite. If you’re looking to improve your life, get started with a journal. I’m confident you’ll start to view your life more than just a little bit differently."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "",
    "text": "I’ve used a lot of IDEs and code editors since I first wrote a “Hello World” program in grade school, from environments as simple as Python’s IDLE to those as jam-packed as IntelliJ IDEA. For now, I’ve settled on using Microsoft’s Visual Studio Code (VS Code) for pretty much all my programming needs. It’s free, open source, and insanely configurable (it can be as lightweight or as complex as you want it to be).\nAs someone who does development across multiple machines, it’s important for me to have a consistent workflow with my tools and themes on each of them. While the default VS Code configuration is usable, it’s not ideal. VS Code without any extensions is effectively just a text editor. Once you add all the extensions, however, it becomes fully-fledged IDE."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html#gitlens",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html#gitlens",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "GitLens",
    "text": "GitLens\nSupercharges the Git capabilities built into Visual Studio Code. The at-a-glance at a glance Git blame annotations and comparison commands are an awesome quality of life improvement, especially when dealing with multiple branches and team repositories."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html#visual-studio-intellicode",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html#visual-studio-intellicode",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "Visual Studio IntelliCode",
    "text": "Visual Studio IntelliCode\nVisual Studio Code IntelliSense is provided for JavaScript, TypeScript, JSON, HTML, CSS, SCSS, and Less out of the box. IntelliCode extends that functionality to Python and Java. Even better, the insights are based on the context of your code combined with machine learning, reducing the friction between getting a bunch of hints and choosing the one you were looking for."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html#bracket-pair-colorizer",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html#bracket-pair-colorizer",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "Bracket Pair Colorizer",
    "text": "Bracket Pair Colorizer\nAllows matching brackets to be identified with colours. Incredibly useful when working with obtuse code in Java or C++."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html#trailing-spaces",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html#trailing-spaces",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "Trailing Spaces",
    "text": "Trailing Spaces\nHighlights trailing spaces. While trailing spaces can be deleted with a single command (or automatically, if you’re so inclined) by editing VS Code’s settings, the highlighting added by this extension just makes editing files less of a hassle, especially when coding in Python (where indentation indicates blocks of code and isn’t simply there for readability)."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html#batch-rename",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html#batch-rename",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "Batch Rename",
    "text": "Batch Rename\nHas saved me some serious time when working on old repositories with poorly named files, or even when the file naming structures of a repository change. With less than 1000 downloads, it’s definitely a niche tool, but it comes in very handy when you need it (works for my regular old files as well)."
  },
  {
    "objectID": "posts/2021-01-09-my-vs-code-setup/index.html#prettier",
    "href": "posts/2021-01-09-my-vs-code-setup/index.html#prettier",
    "title": "A look at my VS Code setup (from long ago)",
    "section": "Prettier",
    "text": "Prettier\nPrettier is amazing at improving the readability of my code without me having to dive into each individual function and tweak the spacing. Using it means I don’t need to spend effort fixing formatting or looking up rules in a style guide (and I can easily make repository-wide changes if I need some custom formatting of my own).\n\nI’m always experimenting with different settings and extensions to streamline the development process, so my config files are never set in stone. I love looking at the workflows of others, and maybe picking up some lesser-known extensions or tools in the process."
  },
  {
    "objectID": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html",
    "href": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html",
    "title": "Putting 20k+ words on a 1MB cheatsheet",
    "section": "",
    "text": "Picture it. You’re finally in that type of course that allows you to put whatever you want on your cheatsheet for the exam, no requirement to have handwritten it on your tablet or (god forbid) using a physical pen on a physical piece of paper, just free reign to type all of it up and copy-paste images to your heart’s content. As an engineering student, such a scenario appears rarely, but when it does, it is oh-so-sweet.\nExcept… when the opportunity does arise, it’s usually for a course where the lecture content rivals some textbooks in just the sheer amount of concepts covered (typically 1k+ slides over the course of a semester, with each slide as dense and filled to the brim with testable content as any other). Which leads to the question: what’s the best way of writing out everything you can reasonably put down on a single sheet of paper (double-sided, of course)?\nThe answer is surprisingly simple. But to get there, there’s 3 things we need to consider: the medium (how to write your cheatsheet), the message (what to write on it), and the machine (how to print it such that everything remains readable).\nOh, and if you’re looking to take a peek at what exactly we’re going to learn how to make, well, here’s an example in it’s full glory:\nAlas, putting together a behemoth of a cheatsheet like this one takes a while. It’s an intricate process that involves making a number of decisions, the first of which is selecting the best tool for the job."
  },
  {
    "objectID": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-medium",
    "href": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-medium",
    "title": "Putting 20k+ words on a 1MB cheatsheet",
    "section": "The Medium",
    "text": "The Medium\nPicking the tool of choice for writing your cheatsheet.\nThis really just boils down to picking one of two choices: taking a WYSIWYG editor approach (word processors the likes of Microsoft Word and Google Docs) or a programmatic approach using a typesetting engine (normally one would just use LaTeX, but the newcomer Typst engine shows a lot of promise and as we’ll see later on, is a hidden gem for making all the granular changes needed for a cheatsheet).\nThere are some third-party alternatives like Cribr and a handful of side projects posted on Github, but they lack the fine-grained customizability that is sorely needed for making your cheatsheet pixel-perfect (including setting fractional font sizes, word and line spacing, character kerning, and most notably image placement).\nThe cream of the crop is Typst, and here’s why you should be using it instead of some of the other options at your disposal.\n\nGoogle Docs/Microsoft Word\nI’ve successfully used Google Docs to make a slightly but not that dense cheatsheet for an operating systems course in the past (which, as any computer science or engineering student can tell you, has oodles of terminology and concepts that you need to remember), and while it was decent to some degree, it’s lacking in a lot of ways (almost all of which are remedied by Typst). Here’s just a few of why you shouldn’t be using Google Docs for your cheatsheet:\n\nIt gets real slow when word count gets real high, especially in Google Docs.\nZooming in/out to parse through really small text is a hassle, especially when it comes to finding specific words or phrases amongst an ocean of text.\nMaking document-wide changes to text formatting (like changing the highlight colour of all bolded text) is at best a finnicky modification of document styles and at worst a completely manual endeavour involving lots of copy-pasting (and trust me, trying to use the format painter with paragraphs of teeny-tiny text without accidentally modifying anything you don’t want to modify is a lesson in pure frustration).\nIt’s really hard to plan out how to organize content (tables would be the ideal way of grouping text together, if they weren’t so finicky to adjust), and moving content from one place to another requires so much reshuffling that it makes you question whether the whole thing is even worth it in the first place (and it is, just not if you’re doing in Google Docs).\nAdding, updating, and removing images is an exercise in frustration and a reminder of how true to life that one meme is (about Word spazzing out your delicately edited formatting for the entire document when you slightly move an image by 1 mm).\n\nSo the WYSIWYG editor approach just isn’t going to cut it for making all the small changes you’re going to need to make for your awe-inspiring cheatsheet. Which leads us to the programmatic approach, and the obvious choice, LaTeX.\n\n\nLaTeX\nLook, I love LaTeX as much as the next guy, but there’s a couple of key pain points with LaTeX that make it suboptimal compared to Typst. Specifically…\n\nIt’s slow to render when there’s a whole lot of text (and frustratingly, will need to render the entire document even if all you do is change a single word).\nAnything and everything requires a metric ton of boilerplate syntax (typing out backslashes and curly brackets is the last thing I want to do 1k words in).\nIt’s practically impossible for the layperson to reasonably extend LaTeX code beyond something simple like shorthand functions for formatting text (which is most people just use templates built by people who’ve spent a lot of time on them).\n\nOn that last point, I took a quick search on Github1 for any LaTeX cheatsheet templates that might be a suitable starting point for something more complex. And… yeah, while it might pass for a cheatsheet for Vim commands, it’s wholly inadequate for dealing with the sheer amount of content in your average university course, and is really a microcosm of the whole boilerplate and limited (practical) extensibility issues surrounding the use of LaTeX for making a cheatsheet. I mean, just look at that code 😔.\n1 at github.com/search?q=cheat+sheet+template&type=repositories\n\n\n\n\n\n\n\n\n\n\n\n(a) Front page\n\n\n\n\n\n\n\n\n\n\n\n(b) Back page\n\n\n\n\n\n\n\nFigure 1: A decent-looking LaTeX cheatsheet, albeit one that isn’t necessarily the best use of space and is an absolute pain to edit in LaTeX. Source: https://wch.github.io/latexsheet\n\n\n\n\n\n\nlatexsheet.tex\n\n% ...\n\n\\subsection{Common \\texttt{documentclass} options}\n\\newlength{\\MyLen}\n\\settowidth{\\MyLen}{\\texttt{letterpaper}/\\texttt{a4paper} \\ }\n\\begin{tabular}{@{}p{\\the\\MyLen}%\n                @{}p{\\linewidth-\\the\\MyLen}@{}}\n\\texttt{10pt}/\\texttt{11pt}/\\texttt{12pt} & Font size. \\\\\n\\texttt{letterpaper}/\\texttt{a4paper} & Paper size. \\\\\n\\texttt{twocolumn} & Use two columns. \\\\\n\\texttt{twoside}   & Set margins for two-sided. \\\\\n\\texttt{landscape} & Landscape orientation.  Must use\n                     \\texttt{dvips -t landscape}. \\\\\n\\texttt{draft}     & Double-space lines.\n\\end{tabular}\n\nUsage:\n\\verb!\\documentclass[!\\textit{opt,opt}\\verb!]{!\\textit{class}\\verb!}!.\n\n\n\\subsection{Packages}\n\\settowidth{\\MyLen}{\\texttt{multicol} }\n\\begin{tabular}{@{}p{\\the\\MyLen}%\n                @{}p{\\linewidth-\\the\\MyLen}@{}}\n%\\begin{tabular}{@{}ll@{}}\n\\texttt{fullpage}  &  Use 1 inch margins. \\\\\n\\texttt{anysize}   &  Set margins: \\verb!\\marginsize{!\\textit{l}%\n                        \\verb!}{!\\textit{r}\\verb!}{!\\textit{t}%\n                        \\verb!}{!\\textit{b}\\verb!}!.            \\\\\n\\texttt{multicol}  &  Use $n$ columns: \n                        \\verb!\\begin{multicols}{!$n$\\verb!}!.   \\\\\n\\texttt{latexsym}  &  Use \\LaTeX\\ symbol font. \\\\\n\\texttt{graphicx}  &  Show image:\n                        \\verb!\\includegraphics[width=!%\n                        \\textit{x}\\verb!]{!%\n                        \\textit{file}\\verb!}!. \\\\\n\\texttt{url}       & Insert URL: \\verb!\\url{!%\n                        \\textit{http://\\ldots}%\n                        \\verb!}!.\n\\end{tabular}\n\nUse before \\verb!\\begin{document}!. \nUsage: \\verb!\\usepackage{!\\textit{package}\\verb!}!\n\n\n\\subsection{Title}\n\\settowidth{\\MyLen}{\\texttt{.author.text.} }\n\\begin{tabular}{@{}p{\\the\\MyLen}%\n                @{}p{\\linewidth-\\the\\MyLen}@{}}\n\\verb!\\author{!\\textit{text}\\verb!}! & Author of document. \\\\\n\\verb!\\title{!\\textit{text}\\verb!}!  & Title of document. \\\\\n\\verb!\\date{!\\textit{text}\\verb!}!   & Date. \\\\\n\\end{tabular}\n\nThese commands go before \\verb!\\begin{document}!.  The declaration\n\\verb!\\maketitle! goes at the top of the document.\n\n\\subsection{Miscellaneous}\n\\settowidth{\\MyLen}{\\texttt{.pagestyle.empty.} }\n\\begin{tabular}{@{}p{\\the\\MyLen}%\n                @{}p{\\linewidth-\\the\\MyLen}@{}}\n\\verb!\\pagestyle{empty}!     &   Empty header, footer\n                                 and no page numbers. \\\\\n\\verb!\\tableofcontents!      &   Add a table of contents here. \\\\\n\n\\end{tabular}\n\n% ...\n\n\n\nTypst (the ideal typesetting engine)\nTypst is a new markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use (literally, just take a look at it’s GitHub: github.com/typst/typst). It’s so damn good that it absolutely deserves it’s own post, but for now we’ll leave that for another day. What’s important to note is that it’s so much easier to write virtually anything in Typst than in LaTeX, and it solves almost all of the pain points in the other tools mentioned above, including:\n\nIncremental compilation, which means that editing content updates in documents/previews instantly (rather than having wait between 1 and many seconds for LaTeX to compile, or for Google Docs/Microsoft Word to stop lagging).\nEasy extensibility: Typst has batteries-included functions for creating tables, drawing lines, setting colours for text and highlighted text (even gradient support is built-in), and so much more. Even the documentation for Typst is amazing, with examples to showcase how to use each of the different functions and how different arguments can affect the output (meanwhile, you pretty much have to learn how to use the intricate features of Google Docs/Microsoft Word by playing around with buttons, and I’m not even sure where you can get the core LaTeX documentation; latex-project.org/help/documentation is so complicated that it’s rather unhelpful, and the Overleaf docs at overleaf.com/learn are nice for beginners but woefully lack the complexity needed for more advanced documents).\n\nSimilar to LaTeX, Typst supports importing third-party extensions and files built by other people (they’re even importable into your current document in the same way, using a single line with an #import ... statement rather than \\usepackage{...}).\n\n\nAnother key characteristic of Typst is that you don’t need any complicated template with tens of lines of boilerplate code to start off writing your cheatsheet so that you have some modicum of structure to follow; you can just start of with something simple (e.g. a single table with a single row and column that fills the entire page) and then build on top of it (e.g. adding more rows and columns that are dynamically sized, with optional adjustments such that some rows/columns can be larger/smaller than others, such that the single table remains filling the entire page with no additional modifications required).\nAnd what’s brilliant about all of this, is that the Typst team have been generous enough to build a fully functional web application (typst.app) to only store your Typst project files, but also edit them with dynamically updating previews and all sorts of bits and bobs to make your Typst writing experience oh-so-sweet (probably my favourite feature is the ability to not only click on some text or box in the output PDF preview and be immediately directed to the line of Typst markup that’s generating that specific output but also, with a line of code selected, jump and zoom in directly to the specific page and portion of the generated PDF that the markup is creating; remember this for later, because it comes in incredibly handy when you’re writing text at a size that’s on par with some smaller species of ants). typst.app is to Typst as overleaf.com is to LaTeX (except the Typst web app is so much better than Overleaf that the folks over at Overleaf actually copied their “new” landing page design2 to mimic Typst’s3, which I’m not too surprised about given just how much better Typst is to use).\n2 \n\n\nOverleaf’s new landing page (circa ~2023-2024), which is totally not a blatant copy of Typst’s.\n\n\n3 \n\n\nTypst’s landing page, which came out around late 2019-early 2020 (I should know, I was one of the first to sign up on the waitlist for the beta).\n\n\nIt’s awe-inspiring to think of just how powerful Typst is given how easy it is to use as well, making it a fantastic option not just for writing cheatsheets but for replacing LaTeX for a ridiculous number of purposes (as for myself, I now exclusively use Typst to typeset pretty much any PDF requiring math notation, which at the time of writing is pretty much just relegated to homework assignments for calculus/algorithms/data structures/database design courses). But we’re here to figure out how to write a kickass cheatsheet, so let’s get to it.\n\n\nA reminder\nNow, something that I’d like to point out before we dive into the meat of how exactly we can use Typst to make our denser-than-osmium cheatsheet is that this isn’t the only good way of writing a cheatsheet. By all means, you should use whatever you’re comfortable with to type it out, especially if your goal is to write something that’s good enough instead of something that’s incredibly dense (and may also might require a wee bit more squinting than some would prefer). What I’m investigating here is a way pushing the maximum readable word count in a typed-up cheatsheet to the very limit, which is why breaking down what makes one methodology or tool suboptimal for that purpose compared to another is so important."
  },
  {
    "objectID": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-message",
    "href": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-message",
    "title": "Putting 20k+ words on a 1MB cheatsheet",
    "section": "The Message",
    "text": "The Message\nFiguring out how to organize content on your cheatsheet.\nSo, here we are. We’ve got Typst down as our writing utencil of choice, and for the purposes of this scenario, let’s suppose we’re writing a cheatsheet for a computer security course (which is just as well, because I’ve got a raw text file just full to the brim of all the different concepts and terminology we’re going to want to put on our cheatsheet).\nWe’ve got our tool; now we have to figure out how to use it. And in order to do that, there’s a couple of important things we need to keep in mind.\n\nHow to Make Tiny Text Readable\n\n1. Uniformity means readability\nAs someone who’s been writing cheatsheets over half a decade now, I’ve made this mistake far too many times in the name of trying to minimize how much white space I leave on my cheatsheets, and almost every time it makes them a complete mess and terribly difficult to parse (which as you can imagine is not ideal in an exam setting where you need to find very specific bits of information in a time constrained environment).\nFor a good example at what not to do, consider my cheatsheet4 for an introductory digital logics course from my second year of university. I can hardly distinguish the different groups of concepts amongst all the differently sized blocks of diagrams mixed in with text, and I was the one who wrote the entire darn thing, I can only imagine how you, dear reader, must feel looking at this spagetthi gobble of a cheatsheet.\n4 \n\n\nA spagetthi gobble of a cheatsheet.\n\n\nHow do we maintain uniformity with incredibly tiny text? Well, for starters, stick with a consistent method of structuring your content. The best way of doing this, regardless of whether you’re using some typesetting engine or a text editor, is with a table. Ideally, a single table that fills up the entire page (so you don’t have to deal with all the spacing headaches trying to properly sandwich together multiple tables of different sizes onto the same 8.5x11 inch sheet of paper) with consistently sized rows and columns. In addition, go with justified or centre-aligned text instead of left/right-aligned (having straight edges for text boxes is a lot easier to read than text boxes with jagged edges that have no easily parseable pattern)\nOne thing to note: it’s ok to break uniformity and have something really stick out on your cheatsheet (if it’s really that important, or maybe if you ran out of time and just need to put something onto paper), just know that when nearly everything breaks uniformity, there isn’t really any uniformity to be had there (we just call that a mess).\nAnd if you’re going to be using tables, there’s another important principle that I like to prescribe.\n\n\n2. It’s easier to read up-down than left-right\nWhich means you should have small widths for columns, such that all you need to do is move your eyes straight down from a single horizontal position such that vertical-only movements enable you to parse through an entire column easily (trust me, this saves a lot of eye strain compared to having to read left to right and then down and back to start on the left every few lines).\n\n\nGroup related content together\n\nHighlight terms while leaving their definitions as plain text so that you can look into a sea of text and quickly see whether the term you’re looking for is even present at all first.\nBreak up multi-layered content by using multiple levels of formatting for your headings, subheadings, definitions, sub-definitions, and so on.\n\nAlso have separate fonts for important terms, plaintext, and special text (e.g. code, math); ensure that all work well at small scales (adjustments to character and word spacing can luckily be made by Typst, which means all you need to do is focus on readability; you can fit more characters of a thin font in the same space of whitespace compared to a wider font, so keep that in mind and maybe don’t select something as wide as Stint Ultra Expanded5).\n\nHave some method of clearly separating unrelated content (that minimizes use of whitespace, like a dotted line).\n\n5 \n\n\nStint Ultra Expanded\n\n\n\n\n\nOther things to keep in mind\nConvert JPGs to SVGs (which are better than PNGs since you can easily edit them to remove backgrounds or non-essential elements from slides so that you’re left with the most important details that remain readable at small sizes).\n\n\nImplementing it in Typst\nTo see the whole project in action, take a look at typst.app/project/rbJ15a29M2OcglqKcAuWkM6. But for an overview of how each individual part of the Typst project works together, continue on reading below.\n6 Note that there are some minute differences between the code linked here and the overview below for clarity purposes.PROJECT DIRECTORY:\n📁cheatsheet/\n├── 📁fonts/\n├── 📁images/\n├── aidsheet.typ\n├── content.typ\n└── lazy.typ\nFirst order of business before we get to the task of structuring our content: the page layout.\nProgrammability is one of Typst’s strong suits, and so it’s good practice to set variables for your cheatsheet’s document formatting properties (e.g. line spacing, image width, font size) because it can enable making minor document-wide changes down the road a whole lot easier. Of course, you’ll notice that I don’t do this all the time in my code below (and that’s largely because I wrote this cheatsheet under the time crunch of studying for 2 exams in 2 days, which meant that many a corner had to be cut to get it done).\n\n\naidsheet.typ\n\n#import \"content.typ\": *\n#import \"lazy.typ\": *\n\n#set page(\n  paper: \"us-letter\",\n  margin: (\n    top: 0.2in, \n    bottom: 0.1in, \n    left: 0.2in, \n    right: 0.2in\n  )\n)\n\n// ...\n\n\n\ncontent.typ\n\n#let img-width = 70%\n#let font-size = 3.6pt\n#let line-spacing = 0.2pt\n\n// ...\n\nAdd another couple hundred lines of formatting code (using alias for headers, bolded text, math, highlights, and more), along with a couple thousand lines of actual cheatsheet content, and you find yourself staring at what can only be described as a marvel of modern (text) engineering."
  },
  {
    "objectID": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-machine",
    "href": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-machine",
    "title": "Putting 20k+ words on a 1MB cheatsheet",
    "section": "The Machine",
    "text": "The Machine\nMaking sure readability and formatting are maintained on the journey from page to paper.\nBlack and white printers are better than color printers, because it’s a lot easier to find a BW printer with a high enough DPI for printing readable size 2-3pt text.\nYou’ll notice I don’t talk much about colour in this post, and this is exactly why. Yt’s pretty much ideal to go for super high contrast black-white text styles instead of greys bc a lot of BW printers actually just reduce the number of dots printed using the small ultra black ink to make gray show up on paper (which as you can imagine is not ideal for maximizing the resolution of text and images at a small scale; this has burned me in the past a couple of times, and I have learnt to stay away from it ever since)\nI’ve also found that a DPI of 1200 is the sweet spot for getting really high quality prints out; while a smaller DPI could technically remain readable, I’d recommend going up in font size by a half point or two just to make your cheatsheet a bit easier to read (if you have to use a magnifying glass to read content, then you’re not exactly making things easier for yourself, which is the entire point behind this whole compressing a textbook into a single sheet of paper)."
  },
  {
    "objectID": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-result",
    "href": "posts/2024-04-24-how-to-put-20k+-words-on-a-cheatsheet/index.html#the-result",
    "title": "Putting 20k+ words on a 1MB cheatsheet",
    "section": "The Result",
    "text": "The Result\nWhat it looks like all put together.\nIs it readable in real life? Quite so. In fact, you know what I kept thinking during the exam that I used this cheatsheet in?\nI think I could’ve gone with a font size at least half a point smaller."
  },
  {
    "objectID": "posts/2020-12-14-a-guide-to-learning/index.html",
    "href": "posts/2020-12-14-a-guide-to-learning/index.html",
    "title": "A guide to learning",
    "section": "",
    "text": "The memorization strategy you’re probably most familiar with is rote memorization, where you try to memorize something by just repeating it to yourself over and over. And while this might work if you have a short test the day after, it’s one of the worst ways you can memorize something. It’s horrendously inefficient. It won’t help you deeply understand a subject. And it’s not going to help you remember things in the long term. But we can do better.\nThere are loads of little techniques you can use to help you remember things, but what’s most important is going to be your overall strategy when it comes to approaching memorization, and a really good strategy is probably going to be incorporating these in some way.\nLet’s start with encoding. Encoding is all about organizing information, and it’s the first step you take when you’re committing something to memory. How you encode information determines how easily you can store it in your memory and retrieve it later on. If you have poor encoding, you’re going to have poor retrieval. Good encoding can build connections between ideas, so that when you think of one concept, you’re reminded of all the concepts that it’s connected to.\nLet’s look at an example. Imagine if i told you to memorize a set of letters, not caring about their order. You could memorize this without much trouble. But if we reorganize the information it becomes ridiculously easy. That’s encoding for you. What we just did is we took several lower bits of information and encoded them into just a few large bits that are effortless to remember.\nNow, what is the point of all this? The point is you need to structure your notes. When you’re writing something down, don’t copy it word for word. Write it in your own words, connect it to ideas you already know about. Reorganize the information so it’s easiest for you to remember. Use the Cornell note taking method, use mnemonics, mind webs, diagrams, whatever. It doesn’t matter what you do, as long as it works for you.\nThe next strategy is active recall. The idea behind active recall is that testing is better than review. Let me explain.\nSimply reading your textbook or reviewing your notes, is largely a passive process. You come across a concept, recognize that you “know” it, and you move on. You don’t get the textbook on your test. You don’t have your notes. On the test, you have to use the cues in the questions to recall everything from memory. So if you want to do well on tests, all you need to do is practice recalling information from your memory.\nNow, what does this look like? Well, it could be something as simple as reading a chapter in the textbook, closing the textbook, and then writing out everything you can remember from memory. It could be explaining a concept to somebody else. It could be doing practice questions before you review notes. The key is to reduce the amount of recognition you’re doing and increase the amount of recall.\nIf you’re learning something for the first time, this can be really tough. But it will do wonders for your memory. And what’s really great about active recall, is that because it forces you to truly recall information from your memory, you’re able to get a much better understanding of what you actually remember and what you don’t. And that’s going to help you fill the gaps in your knowledge way better than just rereading your notes will.\nAnd finally, we have the glue that keeps everything together and makes sure you don’t forget what you memorize: spaced repetition.\nTo truly understand spaced repetition, you need to first understand something called the forgetting curve. Right after you first learn something, that information is fresh in your memory. But what happens is that, overtime, if you don’t revisit that information, your brain is going to replace it with something else it thinks is more important. The longer you don’t review something, the more you’re going to forget about it. And most of the forgetting is going to happen right after you learned it.\nThis is where spaced repetition comes in. When we review that information, we reset the curve, and retain that knowledge for longer before we begin to forget it again. And so by spacing out your studying so you review right before you’re about to forget, something you might’ve remembered for just a week, becomes something that lasts a month, or longer.\nThis is why choosing to study for a test over several days is a lot better than just cramming the night before: later, when you have to use this information again, you have to spend a lot less effort and time relearning because you used spaced repetition. Another great thing about spaced repetition is that, like active recall, it gives you feedback on your memory. If you review consistently over a period of time, you get a good idea of what you know and what you don’t, and so you’re able to organize your studying a lot better than if you just crammed for one day.\nThe minutiae of how everybody learns is different for every person. But when coupled with habits that incorporate these study strategies optimized for long-term understanding, learning can become a whole lot easier of a process.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{hossain2020,\n  author = {Hossain, Sadman},\n  title = {A Guide to Learning},\n  date = {2020-12-14},\n  url = {https://sadman.ca/posts/2020-12-14-a-guide-to-learning},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nHossain, Sadman. 2020. “A Guide to Learning.” December 14,\n2020. https://sadman.ca/posts/2020-12-14-a-guide-to-learning."
  }
]