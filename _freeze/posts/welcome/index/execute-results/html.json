{
  "hash": "de20fa478c535ea63cdc2f9199694a1f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Plotting data in Julia\ndescription: '*Part three* of this `three-part series of Julia posts`, in which I try to figure out how to draw some nice plots'\ndate: '2024-03-03'\ncategories:\n  - Julia\n  - Data Visualisation\nimage: thumbnail.jpg\nimage-alt: 'Cover art to ''Sirius'' by Olaf Stapledon, showing a dog with electrodes on its head'\nformat:\n  html:\n    smooth-scroll: true\n    code-tools: true\n    code-copy: hover\nembed-resources: true\nfilters:\n  - quarto\n  - line-highlight\nexecute:\n  eval: false\nreference-location: margin\ncitation-location: margin\ntitle-block-banner: '#000000'\ntitle-block-banner-color: '#FFFFFF'\n---\n\nAnd so we come to the third post in my extremely ill-considered foray into learning Julia. In the [first part](/posts/2024-03-01_julia-foundation/) of the series I taught myself some of the foundations for writing Julia code, in the [second part](/posts/2024-03-02_julia-data-frames/) I discussed data wrangling in Julia, and so in the third and -- dear god in heaven please -- last of them, I'll take a look at data visualisation using the [Plots](https://docs.juliaplots.org/latest/) package, and using [PalmerPenguins](https://juliapackages.com/p/palmerpenguins) as my data set.\n[And so we come to the third post in my extremely ill-considered foray into learning Julia. In the [first part](/posts/2024-03-01_julia-foundation/) of the series I taught myself some of the foundations for writing Julia code, in the [second part](/posts/2024-03-02_julia-data-frames/) I discussed data wrangling in Julia, and so in the third and -- dear god in heaven please -- last of them, I'll take a look at data visualisation using the [Plots](https://docs.juliaplots.org/latest/) package, and using [PalmerPenguins](https://juliapackages.com/p/palmerpenguins) as my data set.]{.aside}\n\nIt will be brief this time, right? Right????\n\n::: {#f8ca7ee8 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\n```\n:::\n\n\n::: {#36e8b77d .cell class-source='numberLines' source-line-numbers='3' execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\n```\n:::\n\n\n```{.python code-line-numbers=\"true\"}\nimport numpy as np\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r #<<\n```\n\n\n\n<!-- ::: {.panel-tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n::: -->\n\n::: {.column-margin}\n\nSirius, by Olaf Stapledon. See, it's a Penguin science fiction book so it keeps to the penguins theme of this post and the sci-fi theme of the series. I'm soooooo cleverolaf-stapledon.jpgfig-alt=\"Cover of 'Sirius' by Olaf Stapledon\"\n\n:::\n\n## Penguins data\n\nIt is hardly a deep insight to say this, but if you're going to play around with data visualisation tools it does help somewhat to have some data that you can plot. In the last post I pretty much exhausted my ability to look at the *Star Wars* data set that comes bundled in with the dplyr R package, so I'm picked something different this time. For no particular reason I decided to go with the *Palmer Penguins* data set that also exists in R, and has a Julia package in [PalmerPenguins](https://juliapackages.com/p/palmerpenguins).\n\n\n{{< downloadthis thumbnail.jpg dname=File label=\"Download the pdf\" icon=file-earmark-pdf type=success >}}\n\n\n\n:::{.callout-tip}\n### Tip With Caption\n\nHowever, due to a painful little episode part way through writing all these posts I mistakenly decided that the PalmerPenguins package was causing me problems in the context of this quarto blog post (it wasn't... the actual problem was that I had my Julia environment configured incorrectly), so instead I ended up writing a copy of the data to a CSV file and used that instead. Sigh.\n\nasasa\n:::\n\nasasa\n\nOkay, let's start by loading the packages I'll need for this post:\n\n\n```{python3}\nusing CSV\nusing DataFrames\nusing Plots\nusing StatsPlots\n```\n\nAmazing. Thrilling. Et cetera. Now that we're all overwhelmed by the feeling of rising anticipation, let's load the data set from the CSV file:\n\n```{python3}\npenguins = DataFrame(CSV.File(\"penguins.csv\"; missingstring = \"NA\"))\n```\n\nIndeed, that is a lot of penguins. Precisely what I was looking for. I have some data, now I can start drawing some plots.\n\n\n\n::: {.column-margin}\n\n![The Handmaids Tale by Margaret Atwood, because obviously what every queer person and woman wants to be thinking about in 2024 is what's probably going to happen to us in the near future](handmaids-tale.jpg){fig-alt=\"Cover of 'The Handmaids Tale'\"}\n\n:::\n\n\n## Scatter plots\n\nAs you might imagine, there's more than one way you can go about constructing a data visualisation in Julia. For example, there's the [AlgebraOfGraphics](https://aog.makie.org/stable/) system that appears share some design philosophy with the ggplot2 package in R. There's also [Compose](https://giovineitalia.github.io/Compose.jl/latest/), which aims to be a modernised version of the grid package in R, and the [Gadfly](http://gadflyjl.org/stable/) data visualisation system built on top of it. Any of these might have been better choices for me to explore in the first instance, but for whatever reason^[Honestly, at this point I don't even *know* why I'm making the choices I'm making in this increasingly-unhinged series of posts. I chose instead to look at the [Plots](https://docs.juliaplots.org/latest/) package and its extension package [StatsPlots](https://docs.juliaplots.org/dev/generated/statsplots/).] I chose instead to look at the [Plots](https://docs.juliaplots.org/latest/) package and its extension package [StatsPlots](https://docs.juliaplots.org/dev/generated/statsplots/).\n\nThe impression I get from playing around with Plots/StatsPlots is that its design has more in common with the base graphics system in R than with ggplot2. There's a generic function `plot()` that you can use to construct plots, and lots of more specific functions that are essentially wrappers to `plot()`. For example, I'm going to start by drawing a scatter plot. I could use the wrapper function `scatter()` for this purposes, but you don't actually need to do this because it's effectively the same thing as calling `plot()` with different defaults. For learning purposes I find it helpful to understand what the different arguments to `plot()` actually do, so I'll avoid using the convenience functions here.\n\nOkay, so here's a simple scatter plot that plots the bill length of each penguin against the bill depth:\n\n```{python3}\nplot(\n  penguins.bill_length_mm,\n  penguins.bill_depth_mm,\n  seriestype=:scatter,\n  size=(500,500)\n)\n```\n\nIn this code chunk, the first argument specifies the variable to be plotted on the x-axis and the second specifies the variable to be plotted on the y-axis. No surprises there. The key thing to note is that in the later arguments I've specified two [plot attributes](https://docs.juliaplots.org/latest/generated/attributes_plot/). The `seriestype` attribute is what gives me a scatter plot (each observation is plotted with a single discrete plot marker), whereas the `size` attribute is used to control the size of the image produced in the output (in pixels).\n\nCool. Well, I can definitely draw something. That feels like a win.\n\n\n## Using the `@df` macro\n\nOne thing that immediately irritates me about the code I wrote in the last section is that I've was passing the raw vectors `penguins.bill_length_mm` and `penguins.bill_depth_mm` to the plotting function. When you're working with a data frame that always feels clunky to me. What you really want to do is just use the column names `:bill_length_mm` and `:bill_depth_mm`. On the surface though that seems a little tricky to do, because the `plots()` function doesn't necessarily *need* to be given data that are contained within a data frame.\n\nThis is where the `@df` macro comes in handy. Somehow, I have made it three posts into Julia and I have not yet actually had to use a macro for anything, but now is the time. I'll talk about macros in a just a moment, but for now let's simply note that I can prefix my call to `plot()` with a magic bit of syntactic sugar, and now all of a sudden I can simply pass column names and everything works:\n\n```{python3}\n@df penguins plot(\n  :bill_length_mm,\n  :bill_depth_mm,\n  seriestype=:scatter,\n  group=:species,\n  size=(500,500)\n)\n```\n\nI've made a nice little change in this version of the plot too. By mapping the `group` attribute onto the `:species` column in the penguins data set, I've ended up with a plot that shows each of the three penguin species in a different colour and gives me a nice little explanatory legend.\n\nI can take this line of thinking a little further and modify other relevant attributes:\n\n```{python3}\n@df penguins plot(\n  :bill_length_mm,\n  :bill_depth_mm,\n  seriestype=:scatter,\n  group=:species,\n  title=\"Palmer Penguins\",\n  xlabel=\"Bill Length (mm)\",\n  ylabel=\"Bill Depth (mm)\",\n  size=(500,500)\n)\n```\n\nNow I have a plot that has a mildly informative title, and axis labels that are nicer to read. Definitely making some progress now.\n\n\n::: {.column-margin}\n\n![The Day of the Triffids by John Wyndham. Well, it's more optimistic than Handmaids Tale I guess](day-of-the-triffids.jpg){fig-alt=\"Cover of 'The Day of the Triffids'\"}\n\n:::\n\n\n## Macros\n\nSiiiiiiigh. Okay, I used a macro. I suppose I'd better take a quick look at how those things work, right? Macros are part of the [Metaprogramming](https://docs.julialang.org/en/v1/manual/metaprogramming/) toolkit in Julia, and can be used to manipulate Julia expressions passed by the user, making it possible for code that wouldn't otherwise be valid Julia to be executed. In essence we're talking about something qualitatively similar to \"non-standard evaluation\" in R.\n\nBased on that description, you can kind of see what the `@df` macro is doing in the example plots from the last section. It's taking a call to `plots()` that specifies only the column *names* that are associated with a particular vector of observations, and replaces them with the actual data values stored in the relevant data frame when the code is evaluated.\n\nYou can see this in action here:\n\n```{python3}\n@df penguins println(:bill_length_mm[1:3])\n```\n\nIn this code, what `@df` is doing is transforming `:bill_length_mm[1:3]` (which really shouldn't work at all) into `penguins.bill_length_mm[1:3]`. So as a consequence, the code that actually gets executed here is something like  `println(penguins.bill_length_mm[1:3])`, and you get sensible output.\n\nWell, sort of. I haven't quite looked into this in a lot of detail yet, and I'm not quite at the point where I'm really prepared to start writing macros of my own, but it does look like `@df` is slightly more sophisticated, which you can see by using the `@macroexpand` macro to see what actually gets executed in my little example above:\n\n```{python3}\n@macroexpand @df penguins println(:bill_length_mm[1:3])\n```\n\nOkay yeah, there's a little bit more going on than meets the eye (presumably in part because `@df` is designed to work in the context of the Plots package), but the basic idea makes sense at least. I'm happy to move on and defer a proper dive into macros for a future occasion.\n\n::: {.column-margin}\n\n![The Earthsea Quartet by Ursula Le Guin. Much better!](earthsea.jpg){fig-alt=\"Cover of 'Earthsea: The First Four Books'\"}\n\n:::\n\n## Violin plots\n\nAt this point I am getting exhausted. I have written far more on Julia than I intended to, so I'm going to do one more plot and call it a day. In my previous examples I used the `seriestype` argument to `plot()` ensure that what I got out at the end was a scatter plot. I could alternatively set `seriestype=:violin` to get a violin plot.\n\nHere's an example, just to prove to myself that I understand `plot()` well enough to create various different kinds of data visualisations. In the code below I'll first define a `bill_lengths` data frame that contains only the columns I need and -- importantly -- removes the missing values (because the violin series can't handle missing data). Then I'll use `plots()` to create a violin plot:\n\n```{python3}\nbill_lengths = penguins |>\n  d -> subset(d, :bill_length_mm => b -> .!ismissing.(b)) |>\n  d -> select(d, [:species, :bill_length_mm])\n\n@df bill_lengths plot(\n  string.(:species),\n  :bill_length_mm,\n  seriestype=:violin,\n  legend=false,\n  xlabel=\"Species\",\n  ylabel=\"Bill Length (mm)\",\n  size=(500,500)\n)\n```\n\n::: {.aside}\nThis is an aside regarding the table.\n:::\n\nYes, that's what I wanted. Good enough.\n\n\n::: {.column-margin}\n\n![A science fiction omnibus edited by Brian Aldiss. Yes I was getting lazy at this point](omnibus.jpg){fig-alt=\"Cover of 'Science Fiction Omnibus'\"}\n\n:::\n\n## Wrap up\n\nThis has been a long series of posts, written all in one go. I was originally planning to write only the one blog post: I mean, all I *wanted* to do here was teach myself a tiny bit of Julia and scribble down a few notes. But learning a new language always involves introducing yourself to a lot of new concepts, and so the post got very long and needed to be broken down into parts.\n\nBesides, I've really enjoyed learning the basics of Julia. It feels surprisingly comfortable to me, capturing a lot of what I really love about R and also reminding me of the bits about Matlab that I didn't hate. But it's also designed for performance in a way that both R and Matlab sometimes struggle with (e.g., in R the solution to \"how to I make it fast?\" is so often \"rewrite the slow bit in C++\"), so I guess I can see why a lot of people I admire have a lot of positive things to say about Julia.\n\nSo yeah. I'm exhausted. I've written too much. But I'm happy nevertheless.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}